#!/usr/bin/env node

const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

// –ü–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const PORTS = {
  SERVER_PORT: 3001,
  CLIENT_PORT: 5175,
  HMR_PORT: 5176,
};

console.log('============================================');
console.log('  –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–û–í –ù–ê –ü–û–†–¢–ê–• –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
console.log('============================================');
console.log();

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 */
function getOS() {
  const platform = process.platform;
  if (platform === 'win32') return 'windows';
  if (platform === 'darwin') return 'macos';
  return 'linux';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
 */
async function getPIDsOnPort(port) {
  try {
    const os = getOS();
    let command;

    switch (os) {
      case 'windows':
        command = `netstat -ano | findstr :${port}`;
        break;
      case 'macos':
      case 'linux':
        command = `lsof -ti :${port}`;
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: ${os}`);
    }

    const { stdout } = await execAsync(command);

    if (os === 'windows') {
      // –î–ª—è Windows –∏–∑–≤–ª–µ–∫–∞–µ–º PID –∏–∑ –≤—ã–≤–æ–¥–∞ netstat
      const lines = stdout
        .split('\n')
        .filter(line => line.includes('LISTENING'));
      const pids = lines
        .map(line => {
          const parts = line.trim().split(/\s+/);
          return parts[parts.length - 1];
        })
        .filter(pid => pid && pid !== '0');
      return [...new Set(pids)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    } else {
      // –î–ª—è Unix-—Å–∏—Å—Ç–µ–º lsof –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PID –Ω–∞–ø—Ä—è–º—É—é
      return stdout.split('\n').filter(pid => pid.trim() !== '');
    }
  } catch (error) {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—à–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    return [];
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID
 */
async function killProcess(pid) {
  try {
    const os = getOS();
    let command;

    switch (os) {
      case 'windows':
        command = `taskkill /F /PID ${pid}`;
        break;
      case 'macos':
      case 'linux':
        command = `kill -9 ${pid}`;
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: ${os}`);
    }

    await execAsync(command);
    return true;
  } catch (error) {
    return false;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
 */
async function killPortProcesses(port, serviceName) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç ${port} (${serviceName})...`);

  try {
    const pids = await getPIDsOnPort(port);

    if (pids.length === 0) {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
      return;
    }

    console.log(`‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${pids.join(', ')}`);
    console.log(`üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...`);

    const killPromises = pids.map(async pid => {
      const success = await killProcess(pid);
      if (success) {
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
      }
      return success;
    });

    await Promise.all(killPromises);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è
    setTimeout(async () => {
      const remainingPids = await getPIDsOnPort(port);
      if (remainingPids.length === 0) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
      } else {
        console.log(
          `‚ö†Ô∏è  –ù–∞ –ø–æ—Ä—Ç—É ${port} –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: ${remainingPids.join(
            ', '
          )}`
        );
      }
    }, 1000);
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É ${port}:`,
      error.message
    );
  }

  console.log();
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(
    `üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö ${Object.values(PORTS).join(', ')}...`
  );
  console.log();

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞—Ö
  await killPortProcesses(PORTS.SERVER_PORT, '–°–µ—Ä–≤–µ—Ä');
  await killPortProcesses(PORTS.CLIENT_PORT, '–ö–ª–∏–µ–Ω—Ç');
  await killPortProcesses(PORTS.HMR_PORT, 'HMR (Hot Module Replacement)');

  console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('============================================');
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { killPortProcesses, getPIDsOnPort, killProcess };
