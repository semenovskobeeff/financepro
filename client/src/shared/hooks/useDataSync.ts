import { useEffect, useState } from 'react';
import {
  useRecalculateBalancesMutation,
  useCheckBalancesQuery,
} from '../../entities/transaction/api/transactionApi';

interface DataSyncState {
  isChecking: boolean;
  hasMismatch: boolean;
  isSyncing: boolean;
  lastSyncTime: Date | null;
  syncError: string | null;
  inconsistencies: Array<{
    accountId: string;
    accountName: string;
    storedBalance: number;
    calculatedBalance: number;
    difference: number;
  }>;
}

export const useDataSync = () => {
  const [syncState, setSyncState] = useState<DataSyncState>({
    isChecking: false,
    hasMismatch: false,
    isSyncing: false,
    lastSyncTime: null,
    syncError: null,
    inconsistencies: [],
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤
  const {
    data: balanceCheckData,
    isLoading: isCheckingBalances,
    error: checkBalancesError,
    refetch: refetchBalanceCheck,
  } = useCheckBalancesQuery();

  const [recalculateBalances] = useRecalculateBalancesMutation();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  useEffect(() => {
    if (isCheckingBalances) {
      setSyncState(prev => ({ ...prev, isChecking: true }));
      return;
    }

    if (checkBalancesError) {
      setSyncState(prev => ({
        ...prev,
        isChecking: false,
        syncError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤',
      }));
      return;
    }

    if (balanceCheckData?.data) {
      const { hasInconsistencies, inconsistencies = [] } =
        balanceCheckData.data;

      setSyncState(prev => ({
        ...prev,
        isChecking: false,
        hasMismatch: hasInconsistencies,
        inconsistencies,
        syncError: null,
      }));

      if (hasInconsistencies) {
        console.warn('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', inconsistencies);
      } else {
        console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }
    }
  }, [balanceCheckData, isCheckingBalances, checkBalancesError]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ (–≤—ã–∑–æ–≤ refetch)
  const checkBalances = async () => {
    try {
      await refetchBalanceCheck();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      setSyncState(prev => ({
        ...prev,
        syncError: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏',
      }));
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  const syncBalances = async () => {
    setSyncState(prev => ({ ...prev, isSyncing: true, syncError: null }));

    try {
      await recalculateBalances().unwrap();
      setSyncState(prev => ({
        ...prev,
        isSyncing: false,
        hasMismatch: false,
        inconsistencies: [],
        lastSyncTime: new Date(),
        syncError: null,
      }));

      // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        refetchBalanceCheck();
      }, 1000);

      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      setSyncState(prev => ({
        ...prev,
        isSyncing: false,
        syncError:
          error?.data?.message || error?.message || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
      }));
    }
  };

  return {
    ...syncState,
    checkBalances,
    syncBalances,
  };
};
