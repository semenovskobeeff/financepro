import { fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import {
  BaseQueryFn,
  FetchArgs,
  FetchBaseQueryError,
} from '@reduxjs/toolkit/query';
import { config } from '../../config/environment';

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö API
const baseQueryWithAuth = fetchBaseQuery({
  baseUrl: config.useMocks ? '/api' : config.apiUrl,
  timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
  prepareHeaders: (headers, { getState }) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const token = localStorage.getItem('token');

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!headers.get('Content-Type')) {
      headers.set('Content-Type', 'application/json');
    }

    return headers;
  },
});

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const baseQuery: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  if (config.debug) {
    const url = typeof args === 'string' ? args : args.url;
    console.log('[API] –ó–∞–ø—Ä–æ—Å:', {
      url: `${config.useMocks ? '/api' : config.apiUrl}${url}`,
      useMocks: config.useMocks,
      method: typeof args === 'object' ? args.method || 'GET' : 'GET',
    });
  }

  const result = await baseQueryWithAuth(args, api, extraOptions);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (result.error) {
    const endpoint = typeof args === 'string' ? args : args.url;
    const isNetworkError = result.error.status === 'FETCH_ERROR';

    // –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    if (isNetworkError && !config.useMocks) {
      console.warn('[API] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', {
        endpoint,
        recommendation:
          '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞',
      });

      // –ù–µ —Å–ø–∞–º–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      const shouldShowTip = !localStorage.getItem('networkErrorTipShown');
      if (shouldShowTip) {
        console.info(
          'üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–†–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É'
        );
        localStorage.setItem('networkErrorTipShown', 'true');
      }
    } else if (config.debug) {
      console.warn('[API] –û—à–∏–±–∫–∞:', {
        status: result.error.status,
        endpoint,
        useMocks: config.useMocks,
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (result.error.status === 'TIMEOUT_ERROR') {
      if (config.debug) {
        console.warn('[API] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:', {
          endpoint,
          recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
        });
      }
    } else if (result.error.status === 401) {
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è 401
      if (config.debug) {
        console.info('[API] –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è:', endpoint);
      }
    } else if (result.error.status === 403) {
      if (config.debug) {
        console.warn('[API] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:', endpoint);
      }
    } else if (result.error.status === 404) {
      if (config.debug) {
        console.info('[API] –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', endpoint);
      }
    } else if (result.error.status === 500) {
      console.warn('[API] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
        endpoint,
        recommendation: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
      });
    }
  } else if (config.debug && result.data) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    const endpoint = typeof args === 'string' ? args : args.url;
    console.log('[API] –£—Å–ø–µ—Ö:', {
      endpoint,
      dataType: Array.isArray(result.data)
        ? `array[${result.data.length}]`
        : typeof result.data,
    });
  }

  return result;
};
