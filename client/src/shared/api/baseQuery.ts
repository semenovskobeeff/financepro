import { fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import {
  BaseQueryFn,
  FetchArgs,
  FetchBaseQueryError,
} from '@reduxjs/toolkit/query';
import { config } from '../../config/environment';

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö API
const baseQueryWithAuth = fetchBaseQuery({
  baseUrl: config.useMocks ? '/api' : config.apiUrl,
  timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
  prepareHeaders: (headers, { getState }) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const token = localStorage.getItem('token');

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!headers.get('Content-Type')) {
      headers.set('Content-Type', 'application/json');
    }

    return headers;
  },
});

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const baseQuery: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  if (config.debug) {
    const url = typeof args === 'string' ? args : args.url;
    console.log('[API] –ó–∞–ø—Ä–æ—Å:', {
      url: `${config.useMocks ? '/api' : config.apiUrl}${url}`,
      useMocks: config.useMocks,
      method: typeof args === 'object' ? args.method || 'GET' : 'GET',
    });
  }

  const result = await baseQueryWithAuth(args, api, extraOptions);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  if (result.error) {
    const endpoint = typeof args === 'string' ? args : args.url;
    const isNetworkError = result.error.status === 'FETCH_ERROR';
    const isTimeoutError = result.error.status === 'TIMEOUT_ERROR';

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    if (isNetworkError) {
      console.error('[API] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', {
        endpoint,
        apiUrl: config.apiUrl,
        useMocks: config.useMocks,
        error: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        recommendation: config.useMocks
          ? '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É MSW –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤'
          : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      });

      if (!config.useMocks) {
        console.error('[API] üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
        console.error('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        console.error('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API:', config.apiUrl);
        console.error('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        console.error('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      }
    } else if (isTimeoutError) {
      console.error('[API] ‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:', {
        endpoint,
        timeout: '15 —Å–µ–∫—É–Ω–¥',
        recommendation: '–°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç',
      });
    } else if (result.error.status === 401) {
      console.warn('[API] üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
        endpoint,
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      });
    } else if (result.error.status === 403) {
      console.warn('[API] üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:', {
        endpoint,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
      });
    } else if (result.error.status === 404) {
      console.warn('[API] üìÑ –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        endpoint,
        message: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      });
    } else if (result.error.status === 500) {
      console.error('[API] üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
        endpoint,
        message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞',
        recommendation: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
      });
    } else {
      console.error('[API] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        endpoint,
        status: result.error.status,
        error: result.error,
      });
    }
  } else if (config.debug && result.data) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    const endpoint = typeof args === 'string' ? args : args.url;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try {
      const dataSize = JSON.stringify(result.data).length;
      const sizeInMB = dataSize / (1024 * 1024);

      if (sizeInMB > 5) {
        console.warn(
          `[API] ‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç (${sizeInMB.toFixed(2)}MB) –¥–ª—è ${endpoint}`
        );
        console.warn('–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
      }

      console.log('[API] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', {
        endpoint,
        dataType: Array.isArray(result.data)
          ? `array[${result.data.length}]`
          : typeof result.data,
        size: `${(dataSize / 1024).toFixed(1)}KB`,
      });
    } catch (sizeError) {
      console.log('[API] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', {
        endpoint,
        dataType: Array.isArray(result.data)
          ? `array[${result.data.length}]`
          : typeof result.data,
        note: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä',
      });
    }
  }

  return result;
};
