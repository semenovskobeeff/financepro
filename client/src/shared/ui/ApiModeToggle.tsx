import React, { useState, useEffect } from 'react';
import {
  Box,
  Switch,
  FormControlLabel,
  Paper,
  Typography,
  Chip,
  Alert,
  Collapse,
  IconButton,
  Button,
} from '@mui/material';
import {
  CloudDone as CloudIcon,
  BugReport as MockIcon,
  ExpandMore as ExpandIcon,
  ExpandLess as CollapseIcon,
  Refresh as RefreshIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';
import { config } from '../../config/environment';
import { useAppDispatch } from '../../app/store/hooks';
import { reinitializeAuth } from '../../features/auth/model/authSlice';

const ApiModeToggle: React.FC = () => {
  const dispatch = useAppDispatch();
  const [useMocks, setUseMocks] = useState(config.useMocks);
  const [apiStatus, setApiStatus] = useState<'checking' | 'online' | 'offline'>(
    'checking'
  );
  const [expanded, setExpanded] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [hasApiError, setHasApiError] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  const checkApiStatus = async () => {
    setApiStatus('checking');
    setApiError(null);
    try {
      const response = await fetch(
        `${config.apiUrl.replace('/api', '')}/api/health`,
        {
          signal: AbortSignal.timeout(5000), // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        }
      );
      if (response.ok) {
        setApiStatus('online');
        setHasApiError(false);
      } else {
        setApiStatus('offline');
        setApiError(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        setHasApiError(true);
      }
    } catch (error) {
      setApiStatus('offline');
      if (error instanceof Error) {
        if (error.name === 'TimeoutError') {
          setApiError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        } else if (
          error.message.includes('NetworkError') ||
          error.message.includes('fetch')
        ) {
          setApiError(
            '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω'
          );
        } else {
          setApiError(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      } else {
        setApiError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API');
      }
      setHasApiError(true);
    }
  };

  useEffect(() => {
    if (!useMocks) {
      checkApiStatus();
    } else {
      setApiStatus('checking');
      setApiError(null);
      setHasApiError(false);
    }
  }, [useMocks]);

  const handleToggle = () => {
    const newUseMocks = !useMocks;

    setUseMocks(newUseMocks);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π API
    config.updateUseMocks(newUseMocks);

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    dispatch(reinitializeAuth());

    console.log(
      `[ApiModeToggle] –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${
        newUseMocks ? '—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' : '—Ä–µ–∞–ª—å–Ω—ã–π API'
      }`
    );

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setTimeout(() => {
      window.location.reload();
    }, 100);
  };

  const handleSwitchToMocks = () => {
    setUseMocks(true);
    config.updateUseMocks(true);

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    dispatch(reinitializeAuth());

    setApiError(null);
    setHasApiError(false);
    console.log(
      '[ApiModeToggle] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API'
    );

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setTimeout(() => {
      window.location.reload();
    }, 100);
  };

  const getStatusColor = () => {
    if (useMocks) return 'info';
    if (hasApiError) return 'error';
    switch (apiStatus) {
      case 'online':
        return 'success';
      case 'offline':
        return 'error';
      default:
        return 'warning';
    }
  };

  const getStatusText = () => {
    if (useMocks) return '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';
    if (hasApiError) return '–û—à–∏–±–∫–∞ API';
    switch (apiStatus) {
      case 'online':
        return 'API –æ–Ω–ª–∞–π–Ω';
      case 'offline':
        return 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      default:
        return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    }
  };

  // –°–∫—Ä—ã–≤–∞–µ–º –≤ production
  if (config.isProduction) {
    return null;
  }

  return (
    <Paper
      elevation={2}
      sx={{
        position: 'fixed',
        top: 80,
        right: 16,
        zIndex: 1000,
        minWidth: 320,
        maxWidth: 400,
      }}
    >
      <Box sx={{ p: 2 }}>
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
          }}
        >
          <Typography variant="subtitle2" color="textSecondary">
            –†–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Chip
              size="small"
              color={getStatusColor()}
              label={getStatusText()}
              icon={
                useMocks ? (
                  <MockIcon />
                ) : hasApiError ? (
                  <WarningIcon />
                ) : (
                  <CloudIcon />
                )
              }
            />
            <IconButton size="small" onClick={() => setExpanded(!expanded)}>
              {expanded ? <CollapseIcon /> : <ExpandIcon />}
            </IconButton>
          </Box>
        </Box>

        <Collapse in={expanded}>
          <Box sx={{ mt: 2 }}>
            <FormControlLabel
              control={
                <Switch
                  checked={useMocks}
                  onChange={handleToggle}
                  color="primary"
                />
              }
              label={useMocks ? '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' : '–†–µ–∞–ª—å–Ω—ã–π API'}
            />

            {!useMocks && (
              <Box
                sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 1 }}
              >
                <Typography variant="caption" color="textSecondary">
                  API: {config.apiUrl}
                </Typography>
                <IconButton size="small" onClick={checkApiStatus}>
                  <RefreshIcon fontSize="small" />
                </IconButton>
              </Box>
            )}

            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É API */}
            {hasApiError && !useMocks && (
              <Box sx={{ mt: 1 }}>
                <Alert
                  severity="error"
                  sx={{ mb: 1 }}
                  action={
                    <Button
                      color="inherit"
                      size="small"
                      onClick={handleSwitchToMocks}
                    >
                      –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏
                    </Button>
                  }
                >
                  <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                    –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{ display: 'block', mt: 0.5 }}
                  >
                    {apiError}
                  </Typography>
                </Alert>

                <Typography
                  variant="caption"
                  color="textSecondary"
                  sx={{ display: 'block', mt: 1 }}
                >
                  üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
                </Typography>
                <Typography
                  variant="caption"
                  color="textSecondary"
                  sx={{ display: 'block' }}
                >
                  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:{' '}
                  <code>cd server && npm start</code>
                </Typography>
                <Typography
                  variant="caption"
                  color="textSecondary"
                  sx={{ display: 'block' }}
                >
                  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                </Typography>
                <Typography
                  variant="caption"
                  color="textSecondary"
                  sx={{ display: 'block' }}
                >
                  ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                </Typography>
              </Box>
            )}

            {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ */}
            {!hasApiError && (
              <Alert
                severity={
                  useMocks
                    ? 'info'
                    : apiStatus === 'online'
                    ? 'success'
                    : 'warning'
                }
                sx={{ mt: 1 }}
              >
                {useMocks
                  ? '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (MSW)'
                  : apiStatus === 'online'
                  ? '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                  : '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...'}
              </Alert>
            )}
          </Box>
        </Collapse>
      </Box>
    </Paper>
  );
};

export default ApiModeToggle;
