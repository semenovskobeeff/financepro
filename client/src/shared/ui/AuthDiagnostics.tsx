import React, { useState } from 'react';
import {
  Button,
  Box,
  Typography,
  Alert,
  Card,
  CardContent,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
} from '@mui/material';
import {
  CheckCircle,
  Error,
  Warning,
  Info,
  Refresh,
  VpnKey,
  Cloud,
  Storage,
} from '@mui/icons-material';
import { config } from '../../config/environment';

interface DiagnosticResult {
  name: string;
  status: 'success' | 'error' | 'warning' | 'info';
  message: string;
  details?: string;
}

const AuthDiagnostics: React.FC = () => {
  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const runDiagnostics = async () => {
    setIsLoading(true);
    const results: DiagnosticResult[] = [];

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–∞–Ω–Ω—ã—Ö
    results.push({
      name: '–†–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö',
      status: config.useMocks ? 'info' : 'success',
      message: config.useMocks ? '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (MSW)' : '–†–µ–∞–ª—å–Ω—ã–π API',
      details: config.useMocks
        ? '–í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è'
        : '–í —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    results.push({
      name: '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
      status: token && user ? 'success' : 'warning',
      message:
        token && user
          ? '–¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã'
          : '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      details: `–¢–æ–∫–µ–Ω: ${token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${
        user ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
      }`,
    });

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    if (!config.useMocks) {
      try {
        const response = await fetch(`${config.apiUrl}/health`);
        if (response.ok) {
          results.push({
            name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API',
            status: 'success',
            message: '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω',
            details: `URL: ${config.apiUrl}`,
          });

          // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          try {
            const loginResponse = await fetch(`${config.apiUrl}/users/login`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ email: 'test', password: 'test' }),
            });

            results.push({
              name: 'Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
              status: loginResponse.status === 401 ? 'success' : 'warning',
              message:
                loginResponse.status === 401
                  ? 'Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ 401)'
                  : `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${loginResponse.status}`,
              details: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
            });
          } catch (error: unknown) {
            results.push({
              name: 'Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
              status: 'error',
              message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ endpoint',
              details:
                error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            });
          }
        } else {
          results.push({
            name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API',
            status: 'error',
            message: `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`,
            details: `URL: ${config.apiUrl}`,
          });
        }
      } catch (error: unknown) {
        results.push({
          name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API',
          status: 'error',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
          details: error instanceof Error ? error.message : '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞',
        });
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    results.push({
      name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
      status: 'info',
      message: '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      details: `API URL: ${config.apiUrl}, Debug: ${config.debug}`,
    });

    setDiagnostics(results);
    setIsLoading(false);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <CheckCircle color="success" />;
      case 'error':
        return <Error color="error" />;
      case 'warning':
        return <Warning color="warning" />;
      case 'info':
        return <Info color="info" />;
      default:
        return <Info />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success':
        return 'success';
      case 'error':
        return 'error';
      case 'warning':
        return 'warning';
      case 'info':
        return 'info';
      default:
        return 'default';
    }
  };

  return (
    <Card sx={{ maxWidth: 800, margin: 'auto', mt: 2 }}>
      <CardContent>
        <Box
          display="flex"
          alignItems="center"
          justifyContent="space-between"
          mb={2}
        >
          <Typography variant="h6" component="h2">
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          </Typography>
          <Button
            variant="contained"
            startIcon={<Refresh />}
            onClick={runDiagnostics}
            disabled={isLoading}
          >
            {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'}
          </Button>
        </Box>

        {diagnostics.length === 0 && (
          <Alert severity="info">
            –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          </Alert>
        )}

        {diagnostics.length > 0 && (
          <>
            <Typography variant="subtitle1" gutterBottom>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:
            </Typography>
            <List>
              {diagnostics.map((result, index) => (
                <React.Fragment key={index}>
                  <ListItem>
                    <ListItemIcon>{getStatusIcon(result.status)}</ListItemIcon>
                    <ListItemText
                      primary={
                        <Box display="flex" alignItems="center" gap={1}>
                          <Typography component="span">
                            {result.name}
                          </Typography>
                          <Chip
                            label={result.message}
                            color={getStatusColor(result.status) as any}
                            size="small"
                            variant="outlined"
                          />
                        </Box>
                      }
                      secondary={result.details}
                    />
                  </ListItem>
                  {index < diagnostics.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </List>

            <Box mt={2}>
              <Alert severity="info">
                <Typography variant="subtitle2" gutterBottom>
                  –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–π API:
                </Typography>
                <Typography variant="body2">
                  üìß Email: test@example.com
                  <br />
                  üîë –ü–∞—Ä–æ–ª—å: password
                </Typography>
              </Alert>
            </Box>
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default AuthDiagnostics;
