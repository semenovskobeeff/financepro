import React, { useMemo } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Alert,
  Chip,
  LinearProgress,
  Card,
  CardContent,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
} from '@mui/material';
import {
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Info as InfoIcon,
  Assignment as AssignmentIcon,
} from '@mui/icons-material';
import { formatNumber } from '../utils/formatUtils';

interface CategoryData {
  categoryId: string | null;
  categoryName: string;
  categoryIcon: string;
  total: number;
  count: number;
}

interface ExpenseInsightsProps {
  data: CategoryData[];
  period?: string;
  previousPeriodData?: CategoryData[];
  showRecommendations?: boolean;
}

interface Insight {
  type: 'warning' | 'info' | 'success' | 'recommendation';
  title: string;
  description: string;
  value?: string;
  icon: React.ReactNode;
}

const ExpenseInsights: React.FC<ExpenseInsightsProps> = ({
  data,
  period = '–º–µ—Å—è—Ü',
  previousPeriodData,
  showRecommendations = true,
}) => {
  // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  const insights = useMemo(() => {
    if (!data || data.length === 0) return [];

    const totalAmount = data.reduce((sum, item) => sum + item.total, 0);
    const insights: Insight[] = [];

    // 1. –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    const topCategory = data.reduce(
      (max, item) => (item.total > max.total ? item : max),
      data[0]
    );

    const topCategoryPercentage = (topCategory.total / totalAmount) * 100;

    if (topCategoryPercentage > 40) {
      insights.push({
        type: 'warning',
        title: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
        description: `${
          topCategory.categoryName
        } —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${topCategoryPercentage.toFixed(1)}% –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤`,
        value: `${formatNumber(topCategory.total)} ‚ÇΩ`,
        icon: <WarningIcon />,
      });
    } else if (topCategoryPercentage > 25) {
      insights.push({
        type: 'info',
        title: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        description: `–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ "${topCategory.categoryName}"`,
        value: `${topCategoryPercentage.toFixed(1)}%`,
        icon: <InfoIcon />,
      });
    }

    // 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const activeCategories = data.filter(item => item.total > 0).length;
    if (activeCategories <= 3) {
      insights.push({
        type: 'info',
        title: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ',
        description: `–ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ ${activeCategories} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤`,
        icon: <InfoIcon />,
      });
    }

    // 3. –ú–µ–ª–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    const smallExpenses = data.filter(item => item.total < totalAmount * 0.05);
    if (smallExpenses.length > 5) {
      insights.push({
        type: 'info',
        title: '–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ–ª–∫–∏—Ö —Ç—Ä–∞—Ç',
        description: `${smallExpenses.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –º–µ–Ω–µ–µ 5% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã`,
        icon: <AssignmentIcon />,
      });
    }

    // 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    if (previousPeriodData && previousPeriodData.length > 0) {
      const prevTotal = previousPeriodData.reduce(
        (sum, item) => sum + item.total,
        0
      );
      const growth = ((totalAmount - prevTotal) / prevTotal) * 100;

      if (Math.abs(growth) > 20) {
        insights.push({
          type: growth > 0 ? 'warning' : 'success',
          title: growth > 0 ? '–†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤' : '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤',
          description: `–†–∞—Å—Ö–æ–¥—ã ${
            growth > 0 ? '–≤—ã—Ä–æ—Å–ª–∏' : '—Å–Ω–∏–∑–∏–ª–∏—Å—å'
          } –Ω–∞ ${Math.abs(growth).toFixed(
            1
          )}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º`,
          value: `${growth > 0 ? '+' : ''}${growth.toFixed(1)}%`,
          icon: growth > 0 ? <TrendingUpIcon /> : <TrendingDownIcon />,
        });
      }

      // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      data.forEach(currentItem => {
        const prevItem = previousPeriodData.find(
          prev => prev.categoryId === currentItem.categoryId
        );

        if (prevItem) {
          const categoryGrowth =
            ((currentItem.total - prevItem.total) / prevItem.total) * 100;

          if (categoryGrowth > 50) {
            insights.push({
              type: 'warning',
              title: `–†–æ—Å—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${currentItem.categoryName}"`,
              description: `–†–∞—Å—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ ${categoryGrowth.toFixed(1)}%`,
              value: `+${formatNumber(currentItem.total - prevItem.total)} ‚ÇΩ`,
              icon: <TrendingUpIcon />,
            });
          }
        } else if (currentItem.total > totalAmount * 0.1) {
          insights.push({
            type: 'info',
            title: '–ù–æ–≤–∞—è –∑–Ω–∞—á–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            description: `–ü–æ—è–≤–∏–ª–∏—Å—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ "${currentItem.categoryName}"`,
            value: `${formatNumber(currentItem.total)} ‚ÇΩ`,
            icon: <InfoIcon />,
          });
        }
      });
    }

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (showRecommendations) {
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const top3Categories = [...data]
        .sort((a, b) => b.total - a.total)
        .slice(0, 3);

      const top3Total = top3Categories.reduce(
        (sum, item) => sum + item.total,
        0
      );
      const top3Percentage = (top3Total / totalAmount) * 100;

      if (top3Percentage > 70) {
        insights.push({
          type: 'recommendation',
          title: '–§–æ–∫—É—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö',
          description: `–¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ${top3Percentage.toFixed(
            1
          )}% —Ä–∞—Å—Ö–æ–¥–æ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç—Ç–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π`,
          icon: <CheckCircleIcon />,
        });
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
      if (activeCategories > 10) {
        insights.push({
          type: 'recommendation',
          title: '–£–ø—Ä–æ—â–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
          description:
            '–ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–∂–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞—Ç',
          icon: <AssignmentIcon />,
        });
      }
    }

    return insights.slice(0, 6); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤
  }, [data, previousPeriodData, showRecommendations]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = useMemo(() => {
    if (!data || data.length === 0) {
      return null;
    }

    const totalAmount = data.reduce((sum, item) => sum + (item.total || 0), 0);
    const totalTransactions = data.reduce(
      (sum, item) => sum + (item.count || 0),
      0
    );

    const sortedData = [...data].sort(
      (a, b) => (b.total || 0) - (a.total || 0)
    );

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    const avgAmountPerCategory =
      data.length > 0 ? totalAmount / data.length : 0;
    const avgTransactionsPerCategory =
      data.length > 0 ? totalTransactions / data.length : 0;
    const concentrationIndex =
      totalAmount > 0 ? (sortedData[0]?.total || 0) / totalAmount : 0;

    const stats = {
      totalCategories: data.length,
      avgAmountPerCategory,
      avgTransactionsPerCategory,
      topCategory: sortedData[0],
      concentrationIndex,
    };

    return stats;
  }, [data]);

  if (!data || data.length === 0) {
    return (
      <Paper elevation={1} sx={{ p: 3 }}>
        <Typography variant="h6" gutterBottom>
          –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        </Typography>
        <Typography color="text.secondary">
          –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        </Typography>
      </Paper>
    );
  }

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'warning':
        return 'warning';
      case 'success':
        return 'success';
      case 'recommendation':
        return 'info';
      default:
        return 'default';
    }
  };

  const getInsightSeverity = (type: string) => {
    switch (type) {
      case 'warning':
        return 'warning';
      case 'success':
        return 'success';
      case 'recommendation':
        return 'info';
      default:
        return 'info';
    }
  };

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        üí° –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∑–∞ {period}
      </Typography>

      {/* –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
      {categoryStats && (
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="primary">
                  {categoryStats.totalCategories}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="secondary">
                  {formatNumber(categoryStats.avgAmountPerCategory)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  ‚ÇΩ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4">
                  {categoryStats.avgTransactionsPerCategory.toFixed(1)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4">
                  {(categoryStats.concentrationIndex * 100).toFixed(1)}%
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Ç–æ–ø-1
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤ */}
      <Grid container spacing={2}>
        {insights.map((insight, index) => (
          <Grid item xs={12} sm={6} key={index}>
            <Alert
              severity={getInsightSeverity(insight.type)}
              icon={insight.icon}
              variant="outlined"
              sx={{ height: '100%' }}
            >
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  {insight.title}
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  {insight.description}
                </Typography>
                {insight.value && (
                  <Chip
                    label={insight.value}
                    size="small"
                    color={getInsightColor(insight.type) as any}
                    variant="filled"
                  />
                )}
              </Box>
            </Alert>
          </Grid>
        ))}
      </Grid>

      {insights.length === 0 && (
        <Alert severity="info" sx={{ mt: 2 }}>
          <Typography variant="body2">
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤—ã–≥–ª—è–¥–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ
            –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã!
          </Typography>
        </Alert>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      {categoryStats && categoryStats.concentrationIndex > 0.3 && (
        <Paper elevation={1} sx={{ p: 2, mt: 3 }}>
          <Typography variant="subtitle2" gutterBottom>
            –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
            <Box sx={{ width: '100%', mr: 1 }}>
              <LinearProgress
                variant="determinate"
                value={categoryStats.concentrationIndex * 100}
                color={
                  categoryStats.concentrationIndex > 0.5 ? 'error' : 'warning'
                }
                sx={{ height: 8, borderRadius: 4 }}
              />
            </Box>
            <Typography
              variant="body2"
              color="text.secondary"
              sx={{ minWidth: 35 }}
            >
              {(categoryStats.concentrationIndex * 100).toFixed(0)}%
            </Typography>
          </Box>
          <Typography variant="caption" color="text.secondary">
            {categoryStats.concentrationIndex > 0.5
              ? '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤'
              : '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
          </Typography>
        </Paper>
      )}
    </Box>
  );
};

export default ExpenseInsights;
