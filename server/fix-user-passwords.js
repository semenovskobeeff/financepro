require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ MongoDB Atlas...');
console.log('');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    const mongoUri =
      process.env.MONGODB_URI || 'mongodb://localhost:27017/finance-app-test';

    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
    console.log('üìç URI:', mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));

    await mongoose.connect(mongoUri, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const userSchema = new mongoose.Schema(
  {
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    name: { type: String, required: true },
    roles: [{ type: String, default: 'user' }],
  },
  {
    timestamps: true,
  }
);

const User = mongoose.model('User', userSchema);

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
const fixPasswords = async () => {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏...');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    if (users.length === 0) {
      console.log('üë§ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

      const hashedPassword = await bcrypt.hash('password', 12);
      const testUser = new User({
        email: 'test@example.com',
        password: hashedPassword,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        roles: ['user'],
      });

      await testUser.save();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
      console.log('üìß Email: test@example.com');
      console.log('üîë –ü–∞—Ä–æ–ª—å: password');

      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏
    let fixedCount = 0;

    for (const user of users) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
      if (
        !user.password ||
        user.password.length < 50 ||
        !user.password.startsWith('$2')
      ) {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å "password" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const hashedPassword = await bcrypt.hash('password', 12);

        await User.updateOne(
          { _id: user._id },
          { $set: { password: hashedPassword } }
        );

        fixedCount++;
      }
    }

    if (fixedCount > 0) {
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π: ${fixedCount}`);
      console.log('üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: password');
    } else {
      console.log('‚úÖ –í—Å–µ –ø–∞—Ä–æ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    const updatedUsers = await User.find({}, 'email name roles').lean();
    updatedUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email} (${user.name})`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π:', error.message);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  const connected = await connectDB();

  if (!connected) {
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
    console.log('   1. –§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('   2. IP –¥–æ–±–∞–≤–ª–µ–Ω –≤ MongoDB Atlas Network Access');
    console.log('   3. –ö–ª–∞—Å—Ç–µ—Ä MongoDB Atlas –∞–∫—Ç–∏–≤–µ–Ω');
    process.exit(1);
  }

  await fixPasswords();

  console.log('');
  console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
  console.log('üìß Email: test@example.com');
  console.log('üîë –ü–∞—Ä–æ–ª—å: password');

  await mongoose.disconnect();
  process.exit(0);
};

main();
