require('dotenv').config();
const mongoose = require('mongoose');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
require('../src/core/domain/entities/User');
require('../src/core/domain/entities/Account');
require('../src/core/domain/entities/Transaction');
require('../src/core/domain/entities/Goal');
require('../src/core/domain/entities/Debt');
require('../src/core/domain/entities/Subscription');
require('../src/core/domain/entities/Category');

const User = mongoose.model('User');
const Account = mongoose.model('Account');
const Transaction = mongoose.model('Transaction');
const Goal = mongoose.model('Goal');
const Debt = mongoose.model('Debt');
const Subscription = mongoose.model('Subscription');
const Category = mongoose.model('Category');

async function checkTestUserData() {
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(process.env.MONGODB_URI);

    console.log('üë§ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = await User.findOne({ email: 'test@example.com' });

    if (!testUser) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      process.exit(1);
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`);
    console.log(`üìß ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser._id}`);

    console.log('üìä –ü–æ–¥—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö...');
    const [accounts, categories, transactions, goals, debts, subscriptions] =
      await Promise.all([
        Account.countDocuments({ userId: testUser._id }),
        Category.countDocuments({ userId: testUser._id }),
        Transaction.countDocuments({ userId: testUser._id }),
        Goal.countDocuments({ userId: testUser._id }),
        Debt.countDocuments({ userId: testUser._id }),
        Subscription.countDocuments({ userId: testUser._id }),
      ]);

    console.log('\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è test@example.com:');
    console.log(`   –°—á–µ—Ç–∞: ${accounts} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 4`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 10`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 50`);
    console.log(`   –¶–µ–ª–∏: ${goals} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 3`);
    console.log(`   –î–æ–ª–≥–∏: ${debts} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 3`);
    console.log(`   –ü–æ–¥–ø–∏—Å–∫–∏: ${subscriptions} / —Ç—Ä–µ–±—É–µ—Ç—Å—è: 4`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
    const requirements = {
      accounts: 4,
      categories: 10,
      transactions: 50,
      goals: 3,
      debts: 3,
      subscriptions: 4,
    };
    const needsUpdate =
      accounts < requirements.accounts ||
      categories < requirements.categories ||
      transactions < requirements.transactions ||
      goals < requirements.goals ||
      debts < requirements.debts ||
      subscriptions < requirements.subscriptions;

    if (needsUpdate) {
      console.log('\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run reseed');
    } else {
      console.log('\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ');
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

checkTestUserData();
