const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') }); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');

// ================================
// –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
// ================================
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('PORT:', process.env.PORT);
console.log('MONGODB_URI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.MONGODB_URI);
console.log(
  'MONGODB_URI (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):',
  process.env.MONGODB_URI
    ? process.env.MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')
    : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
);
console.log('JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.JWT_SECRET);
console.log('CLIENT_URL:', process.env.CLIENT_URL);
console.log('SEED_DATABASE:', process.env.SEED_DATABASE);
console.log('==================================');

// ================================
// –ò–ú–ü–û–†–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î –ò –ú–û–î–ï–õ–ï–ô
// ================================
const dbConnection = require('./core/infrastructure/database/connection');
const DatabaseSeeder = require('./core/infrastructure/database/seedDatabase');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Mongoose
require('./core/domain/entities/User');
require('./core/domain/entities/Account');
require('./core/domain/entities/Category');
require('./core/domain/entities/Transaction');
require('./core/domain/entities/Goal');
require('./core/domain/entities/Debt');
require('./core/domain/entities/Subscription');

// ================================
// –ò–ú–ü–û–†–¢ –ú–ê–†–®–†–£–¢–û–í
// ================================
const apiRoutes = require('./routes');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3001;

// ================================
// TRUST PROXY –î–õ–Ø RAILWAY
// ================================
// Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å trust proxy
app.set('trust proxy', true);

// ================================
// MIDDLEWARE
// ================================
app.use(express.json());
// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö origins
const allowedOrigins = [
  'http://localhost:8000', // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Docker)
  'http://localhost:5173', // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Vite)
  'http://localhost:3000', // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
  'https://*.vercel.app', // –õ—é–±–æ–π –ø–æ–¥–¥–æ–º–µ–Ω Vercel
  'https://vercel.app', // –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω Vercel
  /https:\/\/.*\.vercel\.app$/, // Regex –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ Vercel
];

// –î–æ–±–∞–≤–ª—è–µ–º CLIENT_URL –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
if (process.env.CLIENT_URL) {
  allowedOrigins.push(process.env.CLIENT_URL);
}

app.use(
  cors({
    origin: allowedOrigins,
    credentials: true,
  })
);
app.use(helmet());
app.use(morgan('dev'));

// ================================
// –ú–ê–†–®–†–£–¢–´
// ================================

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Finance App API Server',
    version: '1.0.0',
    docs: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /api',
    endpoints: [
      'GET /api - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API',
      'GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
      'POST /api/users/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'POST /api/users/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      'GET /api/accounts - –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç–∞',
      'GET /api/transactions - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      'GET /api/categories - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      'GET /api/goals - –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏',
      'GET /api/debts - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏',
      'GET /api/subscriptions - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
      'GET /api/analytics - –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É',
      'GET /api/archive - –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤',
    ],
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –ü–ï–†–ï–î –æ–±—â–∏–º–∏ —Ä–æ—É—Ç–∞–º–∏
app.get('/api/health/database', async (req, res) => {
  try {
    const health = await dbConnection.healthCheck();
    const stats = await dbConnection.getStats();

    res.json({
      status: 'success',
      data: {
        health,
        stats,
        connection: dbConnection.getConnectionStatus(),
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î',
      error: error.message,
    });
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api', apiRoutes);

// ================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ================================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
  res.status(404).json({
    status: 'error',
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
    availableEndpoints: '/api',
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.stack);
  res.status(err.status || 500).json({
    status: 'error',
    message: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
  });
});

// ================================
// –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î –ò –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ================================

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const initializeApp = async () => {
  let dbConnected = false;

  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB
    const connection = await dbConnection.connect();

    if (connection) {
      dbConnected = true;
      console.log('üóÇÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
      await dbConnection.createIndexes();

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      if (process.env.SEED_DATABASE === 'true') {
        console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        try {
          const seeder = new DatabaseSeeder();
          await seeder.seedDatabase();
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (seedError) {
          console.log(
            '‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:',
            seedError.message
          );
          console.log('üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const dbStatus = dbConnection.getConnectionStatus();
      console.log('üìä –°—Ç–∞—Ç—É—Å –ë–î:', {
        connected: dbStatus.isConnected,
        database: dbStatus.name,
        host: dbStatus.host,
      });
    }

    return dbConnected;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);

    // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª server/.env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ MONGODB_URI');
    console.log(
      '   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é MongoDB: https://www.mongodb.com/try/download/community'
    );
    console.log(
      '   3. –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ MongoDB Atlas: https://www.mongodb.com/atlas'
    );
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω–∞: mongod --version');
    console.log(
      '\nüîÑ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)\n'
    );

    return false;
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (process.env.NODE_ENV !== 'test') {
  initializeApp()
    .then(dbConnected => {
      // –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (0.0.0.0) –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      app.listen(PORT, '0.0.0.0', () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üìö API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
        console.log(`üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://0.0.0.0:${PORT}/api`);
        console.log(`üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:${PORT}/`);
        console.log(
          `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: http://localhost:${PORT}/api/health/database`
        );

        if (dbConnected) {
          console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —Å MongoDB Atlas');
        } else {
          console.log('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
        }
      });
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = app; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
