const {
  Transaction,
  Account,
  Category,
} = require('../../../core/domain/entities');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
exports.getTransactions = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 20,
      sort = 'date',
      order = 'desc',
      type,
      accountId,
      categoryId,
      startDate,
      endDate,
      status = 'active',
    } = req.query;

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É
    const filter = {
      userId: req.user._id,
      status,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (type) filter.type = type;
    if (accountId) filter.accountId = accountId;
    if (categoryId) filter.categoryId = categoryId;

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (startDate || endDate) {
      filter.date = {};
      if (startDate) filter.date.$gte = new Date(startDate);
      if (endDate) filter.date.$lte = new Date(endDate);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const sortOptions = {};
    sortOptions[sort] = order === 'desc' ? -1 : 1;

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const transactions = await Transaction.find(filter)
      .sort(sortOptions)
      .skip(skip)
      .limit(parseInt(limit))
      .populate('accountId', 'name type')
      .populate('toAccountId', 'name type')
      .populate('categoryId', 'name type icon');

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const total = await Transaction.countDocuments(filter);

    res.json({
      status: 'success',
      data: {
        transactions,
        totalPages: Math.ceil(total / parseInt(limit)),
        currentPage: parseInt(page),
        total,
      },
    });
  } catch (error) {
    console.error('Get transactions error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π' });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
 */
exports.getTransactionById = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    })
      .populate('accountId', 'name type')
      .populate('toAccountId', 'name type')
      .populate('categoryId', 'name type icon');

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      status: 'success',
      data: transaction,
    });
  } catch (error) {
    console.error('Get transaction by ID error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞
 */
exports.createTransaction = async (req, res) => {
  try {
    const { type, amount, categoryId, accountId, date, description } = req.body;

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      type,
      amount,
      categoryId,
      accountId,
      date,
      description,
      userId: req.user._id,
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!req.user || !req.user._id) {
      return res.status(401).json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      !type ||
      !amount ||
      !accountId ||
      !['income', 'expense'].includes(type)
    ) {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞
    const account = await Account.findOne({
      _id: accountId,
      userId: req.user._id,
      status: 'active',
    });

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (categoryId) {
      const category = await Category.findOne({
        _id: categoryId,
        userId: req.user._id,
        type,
        status: 'active',
      });

      if (!category) {
        return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction({
      userId: req.user._id,
      type,
      amount,
      categoryId,
      accountId,
      date: date || new Date(),
      description,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    if (type === 'income') {
      account.balance += amount;
      account.history.push({
        operationType: 'income',
        type: 'income',
        amount,
        date: transaction.date,
        description: description || '–î–æ—Ö–æ–¥',
      });
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
      if (account.balance < amount) {
        return res
          .status(400)
          .json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ' });
      }
      account.balance -= amount;
      account.history.push({
        operationType: 'expense',
        type: 'expense',
        amount,
        date: transaction.date,
        description: description || '–†–∞—Å—Ö–æ–¥',
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await Promise.all([transaction.save(), account.save()]);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å populated –¥–∞–Ω–Ω—ã–º–∏
    const populatedTransaction = await Transaction.findById(transaction._id)
      .populate('accountId', 'name type')
      .populate('categoryId', 'name type icon');

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
      transactionId: transaction._id,
      type: transaction.type,
      amount: transaction.amount,
      accountBalance: account.balance,
    });

    res.status(201).json({
      status: 'success',
      data: {
        transaction: populatedTransaction,
        account: {
          id: account._id,
          name: account.name,
          balance: account.balance,
        },
      },
    });
  } catch (error) {
    console.error('‚ùå Create transaction error:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      userId: req.user?._id,
      body: req.body,
    });

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        details: error.message,
      });
    }

    if (error.name === 'CastError') {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞',
        details: error.message,
      });
    }

    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
exports.updateTransaction = async (req, res) => {
  try {
    const { categoryId, description, amount, date } = req.body;

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      transactionId: req.params.id,
      userId: req.user._id,
      requestBody: req.body,
    });

    // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    const oldAmount = transaction.amount;
    const oldType = transaction.type;
    let balanceUpdateNeeded = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (categoryId !== undefined) {
      if (categoryId) {
        const category = await Category.findOne({
          _id: categoryId,
          userId: req.user._id,
          type: transaction.type,
          status: 'active',
        });

        if (!category) {
          return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        transaction.categoryId = categoryId;
      } else {
        // –ï—Å–ª–∏ categoryId –ø—É—Å—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        transaction.categoryId = null;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if (description !== undefined) {
      transaction.description = description;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
    if (date !== undefined) {
      transaction.date = new Date(date);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    if (amount !== undefined && amount !== oldAmount) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      if (amount <= 0) {
        return res
          .status(400)
          .json({ message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è' });
      }

      transaction.amount = amount;
      balanceUpdateNeeded = true;
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—É–º–º–∞, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    if (balanceUpdateNeeded) {
      const account = await Account.findById(transaction.accountId);

      if (!account) {
        return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (oldType === 'transfer') {
        // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á—ë—Ç–∞
        const toAccount = await Account.findById(transaction.toAccountId);

        if (!toAccount) {
          return res
            .status(404)
            .json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        account.balance += oldAmount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Å—á—ë—Ç
        toAccount.balance -= oldAmount; // –£–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ü–µ–ª–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–π —Å—É–º–º—ã
        if (account.balance < amount) {
          return res.status(400).json({
            message:
              '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —Å—á–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
          });
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        account.balance -= amount;
        toAccount.balance += amount;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–±–æ–∏—Ö —Å—á–µ—Ç–æ–≤
        account.history.push({
          operationType: 'transfer',
          type: 'transfer',
          amount: amount,
          date: new Date(),
          description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞: ${description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`,
          linkedAccountId: toAccount._id,
          transactionId: transaction._id,
        });

        toAccount.history.push({
          operationType: 'transfer',
          type: 'transfer',
          amount: amount,
          date: new Date(),
          description: `–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: ${
            description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
          }`,
          linkedAccountId: account._id,
          transactionId: transaction._id,
        });

        await toAccount.save();
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        // –°–Ω–∞—á–∞–ª–∞ "–æ—Ç–º–µ–Ω—è–µ–º" —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (oldType === 'income') {
          account.balance -= oldAmount;
        } else if (oldType === 'expense') {
          account.balance += oldAmount;
        }

        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (oldType === 'income') {
          account.balance += amount;
        } else if (oldType === 'expense') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
          if (account.balance < amount) {
            return res.status(400).json({
              message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
            });
          }
          account.balance -= amount;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        account.history.push({
          operationType: oldType,
          type: oldType, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!
          amount: amount,
          date: new Date(),
          description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`,
          transactionId: transaction._id,
        });
      }

      await account.save();
    }

    await transaction.save();

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
      transactionId: transaction._id,
      type: transaction.type,
      amount: transaction.amount,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞
    const populatedTransaction = await Transaction.findById(transaction._id)
      .populate('accountId', 'name type balance')
      .populate('toAccountId', 'name type balance')
      .populate('categoryId', 'name icon');

    res.json({
      status: 'success',
      data: populatedTransaction,
    });
  } catch (error) {
    console.error('‚ùå Update transaction error:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      userId: req.user?._id,
      transactionId: req.params.id,
      body: req.body,
    });

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        details: error.message,
      });
    }

    if (error.name === 'CastError') {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞',
        details: error.message,
      });
    }

    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
exports.archiveTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –î–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    const account = await Account.findById(transaction.accountId);

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if (transaction.type === 'income') {
      account.balance -= transaction.amount;
    } else if (transaction.type === 'expense') {
      account.balance += transaction.amount;
    } else if (transaction.type === 'transfer') {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á–µ—Ç–∞
      const toAccount = await Account.findById(transaction.toAccountId);

      if (!toAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      account.balance += transaction.amount;
      toAccount.balance -= transaction.amount;
      toAccount.status = 'active'; // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è
      await toAccount.save();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—á–µ—Ç–∞
    transaction.status = 'archived';
    account.status = 'active'; // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è

    await Promise.all([transaction.save(), account.save()]);

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
  } catch (error) {
    console.error('Archive transaction error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
 */
exports.restoreTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
      status: 'archived',
    });

    if (!transaction) {
      return res
        .status(404)
        .json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
    }

    // –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    const account = await Account.findById(transaction.accountId);

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.type === 'income') {
      account.balance += transaction.amount;
    } else if (transaction.type === 'expense') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (account.balance < transaction.amount) {
        return res.status(400).json({
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞',
        });
      }
      account.balance -= transaction.amount;
    } else if (transaction.type === 'transfer') {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á–µ—Ç–∞
      const toAccount = await Account.findById(transaction.toAccountId);

      if (!toAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (account.balance < transaction.amount) {
        return res.status(400).json({
          message:
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —Å—á–µ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞',
        });
      }

      account.balance -= transaction.amount;
      toAccount.balance += transaction.amount;
      await toAccount.save();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    transaction.status = 'active';

    await Promise.all([transaction.save(), account.save()]);

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞' });
  } catch (error) {
    console.error('Restore transaction error:', error);
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    });
  }
};
