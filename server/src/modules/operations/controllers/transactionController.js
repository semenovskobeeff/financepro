const {
  Transaction,
  Account,
  Category,
} = require('../../../core/domain/entities');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
exports.getTransactions = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 20,
      sort = 'date',
      order = 'desc',
      type,
      accountId,
      categoryId,
      startDate,
      endDate,
      status = 'active',
    } = req.query;

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É
    const filter = {
      userId: req.user._id,
      status,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (type) filter.type = type;
    if (accountId) filter.accountId = accountId;
    if (categoryId) filter.categoryId = categoryId;

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (startDate || endDate) {
      filter.date = {};
      if (startDate) filter.date.$gte = new Date(startDate);
      if (endDate) filter.date.$lte = new Date(endDate);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const sortOptions = {};
    sortOptions[sort] = order === 'desc' ? -1 : 1;

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const transactions = await Transaction.find(filter)
      .sort(sortOptions)
      .skip(skip)
      .limit(parseInt(limit))
      .populate('accountId', 'name type')
      .populate('toAccountId', 'name type')
      .populate('categoryId', 'name type icon');

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const total = await Transaction.countDocuments(filter);

    res.json({
      status: 'success',
      data: {
        transactions,
        totalPages: Math.ceil(total / parseInt(limit)),
        currentPage: parseInt(page),
        total,
      },
    });
  } catch (error) {
    console.error('Get transactions error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π' });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
 */
exports.getTransactionById = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    })
      .populate('accountId', 'name type')
      .populate('toAccountId', 'name type')
      .populate('categoryId', 'name type icon');

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      status: 'success',
      data: transaction,
    });
  } catch (error) {
    console.error('Get transaction by ID error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞
 */
exports.createTransaction = async (req, res) => {
  try {
    const { type, amount, categoryId, accountId, date, description } = req.body;

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      type,
      amount,
      categoryId,
      accountId,
      date,
      description,
      userId: req.user._id,
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!req.user || !req.user._id) {
      return res.status(401).json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      !type ||
      !amount ||
      !accountId ||
      !['income', 'expense'].includes(type)
    ) {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞
    const account = await Account.findOne({
      _id: accountId,
      userId: req.user._id,
      status: 'active',
    });

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (categoryId) {
      const category = await Category.findOne({
        _id: categoryId,
        userId: req.user._id,
        type,
        status: 'active',
      });

      if (!category) {
        return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction({
      userId: req.user._id,
      type,
      amount,
      categoryId,
      accountId,
      date: date || new Date(),
      description,
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    if (type === 'expense' && account.balance < amount) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ middleware)
    await transaction.save();

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å populated –¥–∞–Ω–Ω—ã–º–∏
    const populatedTransaction = await Transaction.findById(transaction._id)
      .populate('accountId', 'name type')
      .populate('categoryId', 'name type icon');

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –ø–æ—Å–ª–µ middleware
    const updatedAccount = await Account.findById(accountId);

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
      transactionId: transaction._id,
      type: transaction.type,
      amount: transaction.amount,
      accountBalance: updatedAccount.balance,
    });

    res.status(201).json({
      status: 'success',
      data: {
        transaction: populatedTransaction,
        account: {
          id: updatedAccount._id,
          name: updatedAccount.name,
          balance: updatedAccount.balance,
        },
      },
    });
  } catch (error) {
    console.error('‚ùå Create transaction error:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      userId: req.user?._id,
      body: req.body,
    });

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        details: error.message,
      });
    }

    if (error.name === 'CastError') {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞',
        details: error.message,
      });
    }

    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
exports.updateTransaction = async (req, res) => {
  try {
    const { categoryId, description, amount, date, accountId, toAccountId } =
      req.body;

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      transactionId: req.params.id,
      userId: req.user._id,
      requestBody: req.body,
    });

    // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    const oldAmount = transaction.amount;
    const oldAccountId = transaction.accountId;
    const oldToAccountId = transaction.toAccountId;
    const oldType = transaction.type;
    let balanceUpdateNeeded = false;
    let accountsChanged = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    if (accountId !== undefined && accountId !== oldAccountId.toString()) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Å—á–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const newAccount = await Account.findOne({
        _id: accountId,
        userId: req.user._id,
        status: 'active',
      });

      if (!newAccount) {
        return res.status(404).json({ message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      transaction.accountId = accountId;
      accountsChanged = true;
    }

    if (
      oldType === 'transfer' &&
      toAccountId !== undefined &&
      toAccountId !== oldToAccountId?.toString()
    ) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —Å—á–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const newToAccount = await Account.findOne({
        _id: toAccountId,
        userId: req.user._id,
        status: 'active',
      });

      if (!newToAccount) {
        return res
          .status(404)
          .json({ message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (
        accountId === toAccountId ||
        (accountId === undefined &&
          transaction.accountId.toString() === toAccountId)
      ) {
        return res.status(400).json({ message: '–°—á–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏' });
      }

      transaction.toAccountId = toAccountId;
      accountsChanged = true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (categoryId !== undefined) {
      if (categoryId) {
        const category = await Category.findOne({
          _id: categoryId,
          userId: req.user._id,
          type: transaction.type,
          status: 'active',
        });

        if (!category) {
          return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        transaction.categoryId = categoryId;
      } else {
        // –ï—Å–ª–∏ categoryId –ø—É—Å—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        transaction.categoryId = null;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if (description !== undefined) {
      transaction.description = description;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
    if (date !== undefined) {
      transaction.date = new Date(date);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
    if (amount !== undefined && amount !== oldAmount) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      if (amount <= 0) {
        return res
          .status(400)
          .json({ message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è' });
      }

      transaction.amount = amount;
      balanceUpdateNeeded = true;
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å—á–µ—Ç–∞ –∏–ª–∏ —Å—É–º–º–∞, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Ä—É—á–Ω—É—é
    if (balanceUpdateNeeded || accountsChanged) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ middleware
      transaction._skipBalanceUpdate = true;

      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      const oldAccount = await Account.findById(oldAccountId);
      if (!oldAccount) {
        return res.status(404).json({ message: '–°—Ç–∞—Ä—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (oldType === 'transfer') {
        if (oldToAccountId) {
          const oldToAccount = await Account.findById(oldToAccountId);
          if (oldToAccount) {
            // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
            oldAccount.balance += oldAmount;
            oldToAccount.balance -= oldAmount;
            await oldToAccount.save();
          }
        }
      } else {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
        if (oldType === 'income') {
          oldAccount.balance -= oldAmount;
        } else if (oldType === 'expense') {
          oldAccount.balance += oldAmount;
        }
      }
      await oldAccount.save();

      // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –∏ —Å—É–º–º–æ–π
      const newAmount = amount !== undefined ? amount : oldAmount;
      const newAccount = await Account.findById(transaction.accountId);

      if (!newAccount) {
        return res.status(404).json({ message: '–ù–æ–≤—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (transaction.type === 'transfer') {
        if (transaction.toAccountId) {
          const newToAccount = await Account.findById(transaction.toAccountId);
          if (!newToAccount) {
            return res
              .status(404)
              .json({ message: '–ù–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
          if (newAccount.balance < newAmount) {
            return res.status(400).json({
              message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞',
            });
          }

          // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
          newAccount.balance -= newAmount;
          newToAccount.balance += newAmount;
          await newToAccount.save();
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if (transaction.type === 'income') {
          newAccount.balance += newAmount;
        } else if (transaction.type === 'expense') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
          if (newAccount.balance < newAmount) {
            return res.status(400).json({
              message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
            });
          }
          newAccount.balance -= newAmount;
        }
      }

      await newAccount.save();
    }

    await transaction.save();

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
      transactionId: transaction._id,
      type: transaction.type,
      amount: transaction.amount,
      accountId: transaction.accountId,
      toAccountId: transaction.toAccountId,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞
    const populatedTransaction = await Transaction.findById(transaction._id)
      .populate('accountId', 'name type balance')
      .populate('toAccountId', 'name type balance')
      .populate('categoryId', 'name icon');

    res.json({
      status: 'success',
      data: populatedTransaction,
    });
  } catch (error) {
    console.error('‚ùå Update transaction error:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      userId: req.user?._id,
      transactionId: req.params.id,
      body: req.body,
    });

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        details: error.message,
      });
    }

    if (error.name === 'CastError') {
      return res.status(400).json({
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞',
        details: error.message,
      });
    }

    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
exports.archiveTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –î–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    const account = await Account.findById(transaction.accountId);

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if (transaction.type === 'income') {
      account.balance -= transaction.amount;
    } else if (transaction.type === 'expense') {
      account.balance += transaction.amount;
    } else if (transaction.type === 'transfer') {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á–µ—Ç–∞
      const toAccount = await Account.findById(transaction.toAccountId);

      if (!toAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      account.balance += transaction.amount;
      toAccount.balance -= transaction.amount;
      toAccount.status = 'active'; // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è
      await toAccount.save();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—á–µ—Ç–∞
    transaction.status = 'archived';
    transaction._skipBalanceUpdate = true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º middleware –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    account.status = 'active'; // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è

    await Promise.all([transaction.save(), account.save()]);

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
  } catch (error) {
    console.error('Archive transaction error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
 */
exports.restoreTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
      status: 'archived',
    });

    if (!transaction) {
      return res
        .status(404)
        .json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
    }

    // –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    const account = await Account.findById(transaction.accountId);

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.type === 'income') {
      account.balance += transaction.amount;
    } else if (transaction.type === 'expense') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (account.balance < transaction.amount) {
        return res.status(400).json({
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞',
        });
      }
      account.balance -= transaction.amount;
    } else if (transaction.type === 'transfer') {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á–µ—Ç–∞
      const toAccount = await Account.findById(transaction.toAccountId);

      if (!toAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (account.balance < transaction.amount) {
        return res.status(400).json({
          message:
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —Å—á–µ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞',
        });
      }

      account.balance -= transaction.amount;
      toAccount.balance += transaction.amount;
      await toAccount.save();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    transaction.status = 'active';
    transaction._skipBalanceUpdate = true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º middleware –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

    await Promise.all([transaction.save(), account.save()]);

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞' });
  } catch (error) {
    console.error('Restore transaction error:', error);
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    });
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
exports.deleteTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.findOne({
      _id: req.params.id,
      userId: req.user._id,
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    const account = await Account.findById(transaction.accountId);

    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if (transaction.type === 'income') {
      account.balance -= transaction.amount;
    } else if (transaction.type === 'expense') {
      account.balance += transaction.amount;
    } else if (transaction.type === 'transfer') {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞ —Å—á–µ—Ç–∞
      const toAccount = await Account.findById(transaction.toAccountId);

      if (!toAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      account.balance += transaction.amount;
      toAccount.balance -= transaction.amount;
      await toAccount.save();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await account.save();
    await Transaction.findByIdAndDelete(req.params.id);

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('Delete transaction error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

/**
 * –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –±–∞–ª–∞–Ω—Å–∞—Ö
 */
exports.recalculateBalances = async (req, res) => {
  try {
    console.log(
      'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      req.user._id
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const accounts = await Account.find({
      userId: req.user._id,
      status: 'active',
    });

    const results = [];

    for (const account of accounts) {
      const oldBalance = account.balance;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω–æ–ª—å
      account.balance = 0;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
      const transactions = await Transaction.find({
        $or: [{ accountId: account._id }, { toAccountId: account._id }],
        status: 'active',
      }).sort({ date: 1 });

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      for (const transaction of transactions) {
        if (transaction.accountId.toString() === account._id.toString()) {
          // –≠—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç
          if (transaction.type === 'income') {
            account.balance += transaction.amount;
          } else if (
            transaction.type === 'expense' ||
            transaction.type === 'transfer'
          ) {
            account.balance -= transaction.amount;
          }
        } else if (
          transaction.toAccountId &&
          transaction.toAccountId.toString() === account._id.toString()
        ) {
          // –≠—Ç–æ –≤—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
          if (transaction.type === 'transfer') {
            account.balance += transaction.amount;
          }
        }
      }

      await account.save();

      results.push({
        accountId: account._id,
        accountName: account.name,
        oldBalance,
        newBalance: account.balance,
        difference: account.balance - oldBalance,
        transactionsProcessed: transactions.length,
      });

      console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—á–µ—Ç–∞ ${account.name}:`, {
        —Å—Ç–∞—Ä—ã–π: oldBalance,
        –Ω–æ–≤—ã–π: account.balance,
        —Ä–∞–∑–Ω–∏—Ü–∞: account.balance - oldBalance,
      });
    }

    console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');

    res.json({
      status: 'success',
      message: '–ë–∞–ª–∞–Ω—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã',
      data: {
        accountsProcessed: results.length,
        results,
      },
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤',
      error: error.message,
    });
  }
};
