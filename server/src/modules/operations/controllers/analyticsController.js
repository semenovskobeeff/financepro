const {
  Transaction,
  Account,
  Category,
  Goal,
  Debt,
  Subscription,
} = require('../../../core/domain/entities');
const mongoose = require('mongoose');
const analyticsService = require('../services/analyticsService');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
 * @swagger
 * /api/analytics/transactions:
 *   get:
 *     tags:
 *       - Analytics
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [week, month, quarter, year, all]
 *           default: month
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *     responses:
 *       200:
 *         description: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
 */
const getTransactionsAnalytics = async (req, res) => {
  try {
    const userId = req.user._id || req.user.id;
    const { period, startDate, endDate } = req.query;

    console.log(
      'üéØ [CONTROLLER] –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      userId
    );
    console.log('üéØ [CONTROLLER] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      period,
      startDate,
      endDate,
    });

    const analytics = await analyticsService.getTransactionsAnalytics(userId, {
      period,
      startDate,
      endDate,
    });

    console.log('‚úÖ [CONTROLLER] –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    res.json(analytics);
  } catch (error) {
    console.error(
      '‚ùå [CONTROLLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:',
      error
    );
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ü–µ–ª—è–º
 * @swagger
 * /api/analytics/goals:
 *   get:
 *     tags:
 *       - Analytics
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ü–µ–ª—è–º
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ü–µ–ª—è–º
 */
const getGoalsAnalytics = async (req, res) => {
  try {
    const userId = req.user._id || req.user.id;

    const analytics = await analyticsService.getGoalsAnalytics(userId);

    res.json(analytics);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ü–µ–ª–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –¥–æ–ª–≥–∞–º
 * @swagger
 * /api/analytics/debts:
 *   get:
 *     tags:
 *       - Analytics
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –¥–æ–ª–≥–∞–º
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–≥–∞–º
 */
const getDebtsAnalytics = async (req, res) => {
  try {
    const userId = req.user._id || req.user.id;

    const analytics = await analyticsService.getDebtsAnalytics(userId);

    res.json(analytics);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ–ª–≥–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @swagger
 * /api/analytics/dashboard:
 *   get:
 *     tags:
 *       - Analytics
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */
const getDashboardAnalytics = async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (MongoDB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _id)
    const userId = req.user._id || req.user.id;
    console.log(
      'üéØ [CONTROLLER] –ó–∞–ø—Ä–æ—Å —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      userId
    );
    console.log('üéØ [CONTROLLER] –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (_id):', req.user._id);
    console.log('üéØ [CONTROLLER] –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id):', req.user.id);

    const analytics = await analyticsService.getDashboardAnalytics(userId);

    console.log('‚úÖ [CONTROLLER] –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    res.json(analytics);
  } catch (error) {
    console.error(
      '‚ùå [CONTROLLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:',
      error
    );
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
 * @swagger
 * /api/analytics/export:
 *   get:
 *     tags:
 *       - Analytics
 *     summary: –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [transactions, goals, debts]
 *           default: transactions
 *       - in: query
 *         name: format
 *         schema:
 *           type: string
 *           enum: [json, csv]
 *           default: json
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *     responses:
 *       200:
 *         description: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const exportAnalyticsData = async (req, res) => {
  try {
    const userId = req.user._id || req.user.id;
    const { type, format, period, startDate, endDate } = req.query;

    const result = await analyticsService.exportAnalytics(userId, {
      type,
      format,
      period,
      startDate,
      endDate,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename="analytics-${type}-${new Date()
        .toISOString()
        .slice(0, 10)}.csv"`
    );

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç
    const csvData = result.data.map(row => row.join(',')).join('\n');

    res.send(csvData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö' });
  }
};

module.exports = {
  getTransactionsAnalytics,
  getGoalsAnalytics,
  getDebtsAnalytics,
  getDashboardAnalytics,
  exportAnalyticsData,
};
