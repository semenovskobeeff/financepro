const { Account, Transaction } = require('../../../core/domain/entities');

class BalanceService {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkBalancesConsistency(userId) {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const inconsistencies = [];

      for (const account of accounts) {
        const calculatedBalance = await this.calculateAccountBalance(
          account._id
        );
        const storedBalance = account.balance;
        const difference = Math.abs(calculatedBalance - storedBalance);

        if (difference > 0.01) {
          // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          inconsistencies.push({
            accountId: account._id,
            accountName: account.name,
            storedBalance,
            calculatedBalance,
            difference,
          });

          console.warn(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—á–µ—Ç–∞ ${account.name}:`, {
            stored: storedBalance,
            calculated: calculatedBalance,
            difference,
          });
        }
      }

      return {
        hasInconsistencies: inconsistencies.length > 0,
        accountsChecked: accounts.length,
        inconsistencies,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param {string} accountId - ID —Å—á–µ—Ç–∞
   * @returns {Promise<number>} –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
   */
  async calculateAccountBalance(accountId) {
    try {
      let balance = 0;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
      const transactions = await Transaction.find({
        $or: [{ accountId }, { toAccountId: accountId }],
        status: 'active',
      }).sort({ date: 1 });

      for (const transaction of transactions) {
        if (transaction.accountId.toString() === accountId.toString()) {
          // –ò—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç
          if (transaction.type === 'income') {
            balance += transaction.amount;
          } else if (
            transaction.type === 'expense' ||
            transaction.type === 'transfer'
          ) {
            balance -= transaction.amount;
          }
        } else if (
          transaction.toAccountId &&
          transaction.toAccountId.toString() === accountId.toString()
        ) {
          // –í—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
          if (transaction.type === 'transfer') {
            balance += transaction.amount;
          }
        }
      }

      return balance;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   */
  async recalculateAllBalances(userId) {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const results = [];

      for (const account of accounts) {
        const oldBalance = account.balance;
        const newBalance = await this.calculateAccountBalance(account._id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        account.balance = newBalance;
        await account.save();

        results.push({
          accountId: account._id,
          accountName: account.name,
          oldBalance,
          newBalance,
          difference: newBalance - oldBalance,
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ ${account.name}:`, {
          —Å—Ç–∞—Ä—ã–π: oldBalance,
          –Ω–æ–≤—ã–π: newBalance,
          —Ä–∞–∑–Ω–∏—Ü–∞: newBalance - oldBalance,
        });
      }

      return {
        accountsProcessed: accounts.length,
        results,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} autoFix - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async validateAndFixBalances(userId, autoFix = false) {
    try {
      const checkResult = await this.checkBalancesConsistency(userId);

      if (!checkResult.hasInconsistencies) {
        console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        return {
          status: 'ok',
          message: '–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
          ...checkResult,
        };
      }

      if (autoFix) {
        console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...');
        const fixResult = await this.recalculateAllBalances(userId);

        return {
          status: 'fixed',
          message: '–ë–∞–ª–∞–Ω—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã',
          ...checkResult,
          fixResult,
        };
      }

      return {
        status: 'inconsistent',
        message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö',
        ...checkResult,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }
}

module.exports = new BalanceService();
