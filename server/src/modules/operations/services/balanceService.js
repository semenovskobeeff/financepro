const Account = require('../../../core/domain/entities/Account');
const Transaction = require('../../../core/domain/entities/Transaction');

class BalanceService {
  /**
   * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param {string} accountId - ID —Å—á–µ—Ç–∞
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   */
  async recalculateAccountBalance(accountId) {
    try {
      console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞:', accountId);

      const account = await Account.findById(accountId);
      if (!account) {
        throw new Error('–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const oldBalance = account.balance;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å—á–µ—Ç–æ–º (–≤–∫–ª—é—á–∞—è –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ deleted)
      const transactions = await Transaction.find({
        $or: [{ accountId: accountId }, { toAccountId: accountId }],
        status: { $ne: 'deleted' }, // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
      }).sort({ date: 1 });

      let calculatedBalance = 0;

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      transactions.forEach(transaction => {
        if (transaction.accountId.toString() === accountId.toString()) {
          // –≠—Ç–æ –∏—Å—Ö–æ–¥—è—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
          if (transaction.type === 'income') {
            calculatedBalance += transaction.amount;
          } else if (transaction.type === 'expense') {
            calculatedBalance -= transaction.amount;
          } else if (transaction.type === 'transfer') {
            calculatedBalance -= transaction.amount; // –ò—Å—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥
          }
        } else if (
          transaction.toAccountId &&
          transaction.toAccountId.toString() === accountId.toString()
        ) {
          // –≠—Ç–æ –≤—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥
          if (transaction.type === 'transfer') {
            calculatedBalance += transaction.amount; // –í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥
          }
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
      account.balance = calculatedBalance;
      await account.save();

      const result = {
        accountId,
        accountName: account.name,
        oldBalance,
        newBalance: calculatedBalance,
        difference: calculatedBalance - oldBalance,
        transactionsProcessed: transactions.length,
        synchronized: Math.abs(calculatedBalance - oldBalance) > 0.01,
      };

      if (result.synchronized) {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω:', result);
      } else {
        console.log('‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', result);
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   */
  async recalculateAllBalances(userId) {
    try {
      console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const results = [];
      let accountsProcessed = 0;
      let accountsCorrected = 0;

      for (const account of accounts) {
        try {
          const result = await this.recalculateAccountBalance(account._id);
          results.push(result);
          accountsProcessed++;

          if (result.synchronized) {
            accountsCorrected++;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—á–µ—Ç–∞ ${account._id}:`, error);
          results.push({
            accountId: account._id,
            accountName: account.name,
            error: error.message,
          });
        }
      }

      const summary = {
        accountsProcessed,
        accountsCorrected,
        results,
        success: true,
      };

      console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        processed: accountsProcessed,
        corrected: accountsCorrected,
      });

      return summary;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤ —Å—á–µ—Ç–æ–≤
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkBalancesConsistency(userId) {
    try {
      console.log(
        'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        userId
      );

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const inconsistencies = [];
      let accountsChecked = 0;

      for (const account of accounts) {
        try {
          // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ deleted)
          const transactions = await Transaction.find({
            $or: [{ accountId: account._id }, { toAccountId: account._id }],
            status: { $ne: 'deleted' }, // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
          });

          let calculatedBalance = 0;

          transactions.forEach(transaction => {
            if (transaction.accountId.toString() === account._id.toString()) {
              if (transaction.type === 'income') {
                calculatedBalance += transaction.amount;
              } else if (transaction.type === 'expense') {
                calculatedBalance -= transaction.amount;
              } else if (transaction.type === 'transfer') {
                calculatedBalance -= transaction.amount;
              }
            } else if (
              transaction.toAccountId &&
              transaction.toAccountId.toString() === account._id.toString()
            ) {
              if (transaction.type === 'transfer') {
                calculatedBalance += transaction.amount;
              }
            }
          });

          accountsChecked++;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
          const difference = Math.abs(account.balance - calculatedBalance);
          if (difference > 0.01) {
            inconsistencies.push({
              accountId: account._id,
              accountName: account.name,
              storedBalance: account.balance,
              calculatedBalance,
              difference: account.balance - calculatedBalance,
            });
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ ${account._id}:`, error);
        }
      }

      const result = {
        hasInconsistencies: inconsistencies.length > 0,
        accountsChecked,
        inconsistencies,
      };

      if (result.hasInconsistencies) {
        console.log(
          '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö:',
          inconsistencies.length
        );
      } else {
        console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} autoFix - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  async validateAndFixBalances(userId, autoFix = true) {
    try {
      const checkResult = await this.checkBalancesConsistency(userId);

      if (!checkResult.hasInconsistencies) {
        return {
          status: 'ok',
          message: '–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
          ...checkResult,
        };
      }

      if (!autoFix) {
        return {
          status: 'inconsistent',
          message: '–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö',
          ...checkResult,
        };
      }

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      const fixResult = await this.recalculateAllBalances(userId);

      return {
        status: 'fixed',
        message: '–ë–∞–ª–∞–Ω—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        hasInconsistencies: false,
        inconsistencies: [],
        fixResult,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} - –°–Ω–∏–º–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤
   */
  async createBalanceSnapshot(userId) {
    try {
      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const snapshot = {
        userId,
        timestamp: new Date(),
        accounts: accounts.map(account => ({
          accountId: account._id,
          accountName: account.name,
          balance: account.balance,
          type: account.type,
          currency: account.currency,
        })),
      };

      console.log(
        'üì∏ –°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤:',
        snapshot.accounts.length,
        '—Å—á–µ—Ç–æ–≤'
      );
      return snapshot;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }
}

module.exports = new BalanceService();
