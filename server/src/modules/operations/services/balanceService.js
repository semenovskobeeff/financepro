const { Account, Transaction } = require('../../../core/domain/entities');

class BalanceService {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkBalancesConsistency(userId) {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const inconsistencies = [];

      for (const account of accounts) {
        const calculatedBalance = await this.calculateAccountBalance(
          account._id
        );
        const storedBalance = account.balance;
        const difference = calculatedBalance - storedBalance;

        if (Math.abs(difference) > 0.01) {
          // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          inconsistencies.push({
            accountId: account._id,
            accountName: account.name,
            storedBalance,
            calculatedBalance,
            difference,
          });

          console.warn(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—á–µ—Ç–∞ ${account.name}:`, {
            stored: storedBalance,
            calculated: calculatedBalance,
            difference,
          });
        }
      }

      return {
        hasInconsistencies: inconsistencies.length > 0,
        accountsChecked: accounts.length,
        inconsistencies,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param {string} accountId - ID —Å—á–µ—Ç–∞
   * @returns {Promise<number>} –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
   */
  async calculateAccountBalance(accountId) {
    try {
      console.log('üîÑ –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—á–µ—Ç–∞:', accountId);

      // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const account = await Account.findById(accountId);
      if (!account) {
        throw new Error(`–°—á–µ—Ç ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
      const transactions = await Transaction.find({
        $or: [{ accountId }, { toAccountId: accountId }],
        status: 'active',
      }).sort({ date: 1, createdAt: 1 });

      console.log(
        `üí∞ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å—á–µ—Ç–∞ ${account.name}`
      );

      // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      let balance = 0;

      for (const transaction of transactions) {
        const isSourceAccount =
          transaction.accountId.toString() === accountId.toString();
        const isTargetAccount =
          transaction.toAccountId &&
          transaction.toAccountId.toString() === accountId.toString();

        if (isSourceAccount) {
          // –ò—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç
          if (transaction.type === 'income') {
            balance += transaction.amount;
            console.log(`üìà –î–æ—Ö–æ–¥ +${transaction.amount}, –±–∞–ª–∞–Ω—Å: ${balance}`);
          } else if (transaction.type === 'expense') {
            balance -= transaction.amount;
            console.log(`üìâ –†–∞—Å—Ö–æ–¥ -${transaction.amount}, –±–∞–ª–∞–Ω—Å: ${balance}`);
          } else if (transaction.type === 'transfer') {
            balance -= transaction.amount;
            console.log(
              `üì§ –ü–µ—Ä–µ–≤–æ–¥ –∏—Å—Ö–æ–¥—è—â–∏–π -${transaction.amount}, –±–∞–ª–∞–Ω—Å: ${balance}`
            );
          }
        } else if (isTargetAccount) {
          // –í—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
          if (transaction.type === 'transfer') {
            balance += transaction.amount;
            console.log(
              `üì• –ü–µ—Ä–µ–≤–æ–¥ –≤—Ö–æ–¥—è—â–∏–π +${transaction.amount}, –±–∞–ª–∞–Ω—Å: ${balance}`
            );
          }
        }
      }

      console.log(
        `‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è ${account.name}: ${balance}`
      );
      return balance;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   */
  async recalculateAllBalances(userId) {
    try {
      console.log(
        'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        userId
      );

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const results = [];
      let totalCorrections = 0;

      for (const account of accounts) {
        const oldBalance = account.balance;
        const newBalance = await this.calculateAccountBalance(account._id);
        const difference = newBalance - oldBalance;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞
        if (Math.abs(difference) > 0.01) {
          account.balance = newBalance;
          await account.save();
          totalCorrections++;

          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ ${account.name}:`, {
            —Å—Ç–∞—Ä—ã–π: oldBalance,
            –Ω–æ–≤—ã–π: newBalance,
            —Ä–∞–∑–Ω–∏—Ü–∞: difference,
          });
        } else {
          console.log(
            `‚úÖ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ ${account.name} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${oldBalance}`
          );
        }

        results.push({
          accountId: account._id,
          accountName: account.name,
          oldBalance,
          newBalance,
          difference,
          wasChanged: Math.abs(difference) > 0.01,
        });
      }

      console.log(
        `üéØ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—á–µ—Ç–æ–≤: ${totalCorrections} –∏–∑ ${accounts.length}`
      );

      return {
        accountsProcessed: accounts.length,
        accountsCorrected: totalCorrections,
        results,
        success: true,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞
   * @param {string} accountId - ID —Å—á–µ—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncAccountBalance(accountId) {
    try {
      console.log('‚ö° –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞:', accountId);

      const account = await Account.findById(accountId);
      if (!account) {
        throw new Error(`–°—á–µ—Ç ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const oldBalance = account.balance;
      const newBalance = await this.calculateAccountBalance(accountId);
      const difference = newBalance - oldBalance;

      if (Math.abs(difference) > 0.01) {
        account.balance = newBalance;
        await account.save();

        console.log(
          `üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ ${account.name}`,
          {
            —Å—Ç–∞—Ä—ã–π: oldBalance,
            –Ω–æ–≤—ã–π: newBalance,
            —Ä–∞–∑–Ω–∏—Ü–∞: difference,
          }
        );

        return {
          synchronized: true,
          oldBalance,
          newBalance,
          difference,
        };
      }

      console.log(
        `‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ ${account.name} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`
      );
      return {
        synchronized: false,
        oldBalance,
        newBalance,
        difference: 0,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} autoFix - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async validateAndFixBalances(userId, autoFix = true) {
    try {
      console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const checkResult = await this.checkBalancesConsistency(userId);

      if (!checkResult.hasInconsistencies) {
        console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        return {
          status: 'ok',
          message: '–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
          ...checkResult,
        };
      }

      console.log(
        `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${checkResult.inconsistencies.length} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤`
      );

      if (autoFix) {
        console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...');
        const fixResult = await this.recalculateAllBalances(userId);

        return {
          status: 'fixed',
          message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixResult.accountsCorrected} –±–∞–ª–∞–Ω—Å–æ–≤`,
          ...checkResult,
          fixResult,
        };
      }

      return {
        status: 'inconsistent',
        message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö',
        ...checkResult,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –°–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
   */
  async createBalanceSnapshot(userId) {
    try {
      console.log('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const accounts = await Account.find({
        userId,
        status: 'active',
      });

      const snapshot = {
        userId,
        timestamp: new Date(),
        accounts: accounts.map(account => ({
          accountId: account._id,
          accountName: account.name,
          balance: account.balance,
        })),
      };

      console.log(`üì∏ –°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫ ${accounts.length} —Å—á–µ—Ç–æ–≤`);
      return snapshot;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }
}

module.exports = new BalanceService();
