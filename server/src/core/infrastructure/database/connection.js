const mongoose = require('mongoose');

class DatabaseConnection {
  constructor() {
    this.isConnected = false;
    this.connection = null;
  }

  async connect() {
    try {
      const mongoUri =
        process.env.MONGODB_URI || 'mongodb://localhost:27017/finance-app-test';

      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      console.log(
        `üìç URI: ${mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ useNewUrlParser –∏ useUnifiedTopology)
      const options = {
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 15000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        socketTimeoutMS: 45000,
        retryWrites: true,
        bufferCommands: false,

        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        ...(process.env.NODE_ENV === 'development' && {
          autoIndex: true,
        }),
      };

      this.connection = await mongoose.connect(mongoUri, options);
      this.isConnected = true;

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log(
        `üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.connection.connection.db.databaseName}`
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();

      return this.connection;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (
        error.message.includes('ENOTFOUND') ||
        error.message.includes('ECONNREFUSED')
      ) {
        console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é MongoDB');
        console.log('   2. –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ MongoDB Atlas –≤ —Ñ–∞–π–ª–µ .env');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å MONGODB_URI');
      }

      this.isConnected = false;

      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π –ë–î
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
      return null;
    }
  }

  setupEventHandlers() {
    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    mongoose.connection.on('connected', () => {
      console.log('üîó Mongoose –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
    });

    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongoose.connection.on('error', error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', error);
      this.isConnected = false;
    });

    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    mongoose.connection.on('disconnected', () => {
      console.log('üîå Mongoose –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç MongoDB');
      this.isConnected = false;
    });

    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mongoose.connection.on('reconnected', () => {
      console.log('üîÑ Mongoose –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
      this.isConnected = true;
    });

    // Graceful shutdown
    process.on('SIGINT', this.gracefulShutdown.bind(this));
    process.on('SIGTERM', this.gracefulShutdown.bind(this));
  }

  async gracefulShutdown() {
    console.log('üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB...');
    try {
      await mongoose.connection.close();
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      process.exit(1);
    }
  }

  async disconnect() {
    if (this.isConnected) {
      await mongoose.connection.close();
      this.isConnected = false;
      console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    }
  }

  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      readyState: mongoose.connection.readyState,
      host: mongoose.connection.host,
      port: mongoose.connection.port,
      name: mongoose.connection.name,
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
  async createIndexes() {
    try {
      if (!this.isConnected) {
        console.log(
          '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤'
        );
        return;
      }

      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');

      const models = [
        'User',
        'Account',
        'Category',
        'Transaction',
        'Goal',
        'Debt',
        'Subscription',
      ];

      for (const modelName of models) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å
          if (!mongoose.models[modelName]) {
            console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          const model = mongoose.model(modelName);

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è User –º–æ–¥–µ–ª–∏
          if (modelName === 'User') {
            try {
              // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
              const existingIndexes = await model.collection.indexes();
              const conflictingIndexes = existingIndexes.filter(
                index =>
                  index.name.includes('email_1') && index.name !== 'email_1'
              );

              // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
              for (const index of conflictingIndexes) {
                try {
                  await model.collection.dropIndex(index.name);
                  console.log(
                    `üîß –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å ${index.name} –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}`
                  );
                } catch (dropError) {
                  console.log(
                    `‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å ${index.name}: ${dropError.message}`
                  );
                }
              }
            } catch (indexError) {
              console.log(
                `‚ÑπÔ∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–ª—è ${modelName}: ${indexError.message}`
              );
            }
          }

          // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–æ–¥–µ–ª–∏
          await model.createIndexes();
          console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}`);
        } catch (error) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
          if (error.code === 11000) {
            console.log(`‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}`);
          } else if (
            error.code === 85 ||
            error.message.includes('An existing index has the same name')
          ) {
            console.log(
              `‚ÑπÔ∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ`
            );
          } else if (error.message.includes('Index with name')) {
            console.log(`‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}`);
          } else {
            console.log(
              `‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è ${modelName}: ${error.message}`
            );
          }
        }
      }

      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
  async healthCheck() {
    try {
      const admin = mongoose.connection.db.admin();
      const result = await admin.ping();

      return {
        status: 'healthy',
        database: mongoose.connection.db.databaseName,
        ping: result.ok === 1,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
  async getStats() {
    try {
      const db = mongoose.connection.db;
      const stats = await db.stats();

      return {
        database: db.databaseName,
        collections: stats.collections,
        dataSize: this.formatBytes(stats.dataSize),
        storageSize: this.formatBytes(stats.storageSize),
        indexSize: this.formatBytes(stats.indexSize),
        documents: stats.objects,
        avgObjSize: this.formatBytes(stats.avgObjSize),
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:', error);
      return null;
    }
  }

  formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const dbConnection = new DatabaseConnection();

module.exports = dbConnection;
