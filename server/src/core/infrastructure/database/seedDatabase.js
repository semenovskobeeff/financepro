const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const User = require('../../domain/entities/User');
const Account = require('../../domain/entities/Account');
const Category = require('../../domain/entities/Category');
const Transaction = require('../../domain/entities/Transaction');
const Goal = require('../../domain/entities/Goal');
const Debt = require('../../domain/entities/Debt');
const Subscription = require('../../domain/entities/Subscription');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
class DatabaseSeeder {
  constructor() {
    this.testUserId = null;
  }

  async seedDatabase() {
    try {
      console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
      const existingUsers = await User.countDocuments();
      if (existingUsers > 0) {
        console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        return await this.ensureTestDataCompleteness();
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.createTestUser();

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await this.createDefaultCategories();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞
      await this.createTestAccounts();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.createTestTransactions();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏
      await this.createTestGoals();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–ª–≥–∏
      await this.createTestDebts();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await this.createTestSubscriptions();

      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.createArchivedData();

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      return await this.getTestUser();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î:', error);
      throw error;
    }
  }

  async ensureTestDataCompleteness() {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testUser = await User.findOne({ email: 'test@example.com' });
      if (!testUser) {
        console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...');
        return await this.recreateAllTestData();
      }

      this.testUserId = testUser._id;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
      const [
        accountsCount,
        categoriesCount,
        transactionsCount,
        goalsCount,
        debtsCount,
        subscriptionsCount,
      ] = await Promise.all([
        Account.countDocuments({ userId: this.testUserId }),
        Category.countDocuments({ userId: this.testUserId }),
        Transaction.countDocuments({ userId: this.testUserId }),
        Goal.countDocuments({ userId: this.testUserId }),
        Debt.countDocuments({ userId: this.testUserId }),
        Subscription.countDocuments({ userId: this.testUserId }),
      ]);

      console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:');
      console.log(`   –°—á–µ—Ç–∞: ${accountsCount}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount}`);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactionsCount}`);
      console.log(`   –¶–µ–ª–∏: ${goalsCount}`);
      console.log(`   –î–æ–ª–≥–∏: ${debtsCount}`);
      console.log(`   –ü–æ–¥–ø–∏—Å–∫–∏: ${subscriptionsCount}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
      const requirements = {
        accounts: 4, // –û—Å–Ω–æ–≤–Ω–æ–π, —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π, –∫—Ä–µ–¥–∏—Ç–Ω—ã–π, –æ—Ç–ø—É—Å–∫–Ω–æ–π
        categories: 10, // –ú–∏–Ω–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        transactions: 50, // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 3 –º–µ—Å—è—Ü–∞
        goals: 3, // 3 —Ü–µ–ª–∏
        debts: 3, // 3 –¥–æ–ª–≥–∞
        subscriptions: 4, // 4 –ø–æ–¥–ø–∏—Å–∫–∏
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ
      const needsUpdate =
        accountsCount < requirements.accounts ||
        categoriesCount < requirements.categories ||
        transactionsCount < requirements.transactions ||
        goalsCount < requirements.goals ||
        debtsCount < requirements.debts ||
        subscriptionsCount < requirements.subscriptions;

      if (needsUpdate) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        return await this.recreateAllTestData();
      } else {
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ');
        return { userId: this.testUserId };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return await this.recreateAllTestData();
    }
  }

  async recreateAllTestData() {
    console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.clearTestUserData();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
      await this.createTestUser();

      // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω—É–ª—è
      await this.createDefaultCategories();
      await this.createTestAccounts();
      await this.createTestTransactions();
      await this.createTestGoals();
      await this.createTestDebts();
      await this.createTestSubscriptions();
      await this.createArchivedData();

      console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã');
      return { userId: this.testUserId };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  async clearTestUserData() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await User.findOne({ email: 'test@example.com' });
    if (!testUser) {
      console.log('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const testUserId = testUser._id;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await Promise.all([
      Account.deleteMany({ userId: testUserId }),
      Category.deleteMany({ userId: testUserId }),
      Transaction.deleteMany({ userId: testUserId }),
      Goal.deleteMany({ userId: testUserId }),
      Debt.deleteMany({ userId: testUserId }),
      Subscription.deleteMany({ userId: testUserId }),
      User.deleteOne({ _id: testUserId }),
    ]);

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã');
  }

  async createTestUser() {
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    const testUser = new User({
      email: 'test@example.com',
      password: 'password', // –ë—É–¥–µ—Ç –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ pre-save middleware
      name: '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤—ã–π',
      roles: ['user'],
      settings: {
        currency: 'RUB',
        language: 'ru',
        notifications: {
          email: true,
          push: true,
          sms: false,
        },
        privacy: {
          dataSharing: false,
          analytics: true,
        },
      },
    });

    await testUser.save();
    this.testUserId = testUser._id;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`);
  }

  async getTestUser() {
    if (!this.testUserId) {
      const user = await User.findOne({ email: 'test@example.com' });
      this.testUserId = user ? user._id : null;
    }
    return { userId: this.testUserId };
  }

  async createDefaultCategories() {
    console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');

    await Category.createDefaultCategories(this.testUserId);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  }

  async createTestAccounts() {
    console.log('üè¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤...');

    const accounts = [
      {
        userId: this.testUserId,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        type: 'bank',
        balance: 158500,
        currency: 'RUB',
        cardNumber: '4276 1234 5678 4853',
        bankName: '–°–±–µ—Ä–±–∞–Ω–∫',
        status: 'active',
        isDefault: true,
      },
      {
        userId: this.testUserId,
        name: '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç',
        type: 'deposit',
        balance: 256000,
        currency: 'RUB',
        bankName: '–í–¢–ë',
        interestRate: 5.5,
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
        type: 'credit',
        balance: -15800,
        currency: 'RUB',
        cardNumber: '5536 1234 5678 2376',
        bankName: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        creditLimit: 100000,
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–û—Ç–ø—É—Å–∫–Ω–æ–π —Å—á—ë—Ç',
        type: 'bank',
        balance: 75000,
        currency: 'RUB',
        bankName: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
        status: 'active',
      },
    ];

    const createdAccounts = await Account.insertMany(accounts);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdAccounts.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤`);
    return createdAccounts;
  }

  async createTestTransactions() {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const accounts = await Account.find({ userId: this.testUserId }).limit(4);
    const categories = await Category.find({ userId: this.testUserId });

    const incomeCategories = categories.filter(c => c.type === 'income');
    const expenseCategories = categories.filter(c => c.type === 'expense');

    const transactions = [];
    const today = new Date();

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π –¥–ª—è –±–æ–ª—å—à–µ–π –ø–æ–ª–Ω–æ—Ç—ã
    for (let i = 1; i <= 90; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
      if (date > today) continue;

      // –°–ª—É—á–∞–π–Ω—ã–µ –¥–æ—Ö–æ–¥—ã (—Ä–µ–∂–µ)
      if (Math.random() < 0.25) {
        const category =
          incomeCategories[Math.floor(Math.random() * incomeCategories.length)];
        transactions.push({
          userId: this.testUserId,
          type: 'income',
          amount: Math.floor(Math.random() * 50000) + 5000,
          categoryId: category._id,
          accountId: accounts[0]._id,
          date: date,
          description: `–î–æ—Ö–æ–¥ - ${category.name}`,
          status: 'active',
          location: undefined, // –£–±–∏—Ä–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        });
      }

      // –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—á–∞—â–µ)
      if (Math.random() < 0.8) {
        const category =
          expenseCategories[
            Math.floor(Math.random() * expenseCategories.length)
          ];
        transactions.push({
          userId: this.testUserId,
          type: 'expense',
          amount: Math.floor(Math.random() * 15000) + 500,
          categoryId: category._id,
          accountId: accounts[Math.floor(Math.random() * 2)]._id, // –û—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π
          date: date,
          description: `–†–∞—Å—Ö–æ–¥ - ${category.name}`,
          status: 'active',
          location: undefined, // –£–±–∏—Ä–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        });
      }

      // –°–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (—Ä–µ–¥–∫–æ)
      if (Math.random() < 0.1 && accounts.length > 1) {
        transactions.push({
          userId: this.testUserId,
          type: 'transfer',
          amount: Math.floor(Math.random() * 20000) + 1000,
          accountId: accounts[0]._id,
          toAccountId:
            accounts[Math.floor(Math.random() * (accounts.length - 1)) + 1]._id,
          date: date,
          description: '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏',
          status: 'active',
          location: undefined, // –£–±–∏—Ä–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const lastMonth = new Date(today);
    lastMonth.setMonth(lastMonth.getMonth() - 1);

    const twoMonthsAgo = new Date(today);
    twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2);

    transactions.push(
      {
        userId: this.testUserId,
        type: 'income',
        amount: 120000,
        categoryId:
          incomeCategories.find(c => c.name === '–ó–∞—Ä–ø–ª–∞—Ç–∞')?._id ||
          incomeCategories[0]._id,
        accountId: accounts[0]._id,
        date: new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1),
        description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü',
        status: 'active',
        location: undefined, // –£–±–∏—Ä–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      },
      {
        userId: this.testUserId,
        type: 'income',
        amount: 300000,
        categoryId:
          incomeCategories.find(c => c.name === '–ë–æ–Ω—É—Å—ã')?._id ||
          incomeCategories[0]._id,
        accountId: accounts[1]._id,
        date: new Date(twoMonthsAgo.getFullYear(), twoMonthsAgo.getMonth(), 15),
        description: '–ì–æ–¥–æ–≤–æ–π –±–æ–Ω—É—Å',
        status: 'active',
        location: undefined, // –£–±–∏—Ä–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      }
    );

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    const createdTransactions = [];
    for (const transactionData of transactions) {
      try {
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ location –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –≤—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        const cleanData = {
          userId: transactionData.userId,
          type: transactionData.type,
          amount: transactionData.amount,
          categoryId: transactionData.categoryId,
          accountId: transactionData.accountId,
          toAccountId: transactionData.toAccountId,
          date: transactionData.date,
          description: transactionData.description,
          status: transactionData.status,
        };

        const transaction = new Transaction(cleanData);
        const saved = await transaction.save();
        createdTransactions.push(saved);
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
      }
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdTransactions.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }

  async createTestGoals() {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π...');

    const accounts = await Account.find({ userId: this.testUserId });

    const goals = [
      {
        userId: this.testUserId,
        name: '–û—Ç–ø—É—Å–∫ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ',
        description: '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤ –ü—Ö—É–∫–µ—Ç',
        accountId:
          accounts.find(a => a.name === '–û—Ç–ø—É—Å–∫–Ω–æ–π —Å—á—ë—Ç')?._id ||
          accounts[0]._id,
        targetAmount: 120000,
        deadline: new Date(Date.now() + 150 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 5 –º–µ—Å—è—Ü–µ–≤
        progress: 57000,
        priority: 'high',
        category: 'travel',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–ù–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫',
        description: 'MacBook Pro –¥–ª—è —Ä–∞–±–æ—Ç—ã',
        accountId: accounts[1]._id,
        targetAmount: 180000,
        deadline: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞
        progress: 45000,
        priority: 'medium',
        category: 'purchase',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ñ–æ–Ω–¥',
        description: '–†–µ–∑–µ—Ä–≤ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        accountId: accounts[1]._id,
        targetAmount: 500000,
        deadline: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ –≥–æ–¥
        progress: 150000,
        priority: 'urgent',
        category: 'emergency',
        status: 'active',
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏
    goals[0].transferHistory = [
      {
        amount: 25000,
        date: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000),
        fromAccountId: accounts[0]._id,
        description: '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å',
      },
      {
        amount: 20000,
        date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        fromAccountId: accounts[0]._id,
        description: '–ú–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
      },
      {
        amount: 12000,
        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        fromAccountId: accounts[0]._id,
        description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
      },
    ];

    const createdGoals = await Goal.insertMany(goals);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdGoals.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π`);
  }

  async createTestDebts() {
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–ª–≥–æ–≤...');

    const accounts = await Account.find({ userId: this.testUserId });

    const debts = [
      {
        userId: this.testUserId,
        name: '–ò–ø–æ—Ç–µ–∫–∞',
        type: 'mortgage',
        initialAmount: 3000000,
        currentAmount: 2856000,
        interestRate: 9.5,
        startDate: new Date(2023, 1, 15),
        endDate: new Date(2043, 1, 15),
        nextPaymentDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
        nextPaymentAmount: 35000,
        lenderName: '–°–±–µ—Ä–±–∞–Ω–∫',
        linkedAccountId: accounts[0]._id,
        paymentFrequency: 'monthly',
        contractNumber: 'MB-123456789',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç',
        type: 'loan',
        initialAmount: 1200000,
        currentAmount: 850000,
        interestRate: 12.5,
        startDate: new Date(2022, 9, 15),
        endDate: new Date(2027, 9, 15),
        nextPaymentDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000),
        nextPaymentAmount: 25000,
        lenderName: '–í–¢–ë',
        linkedAccountId: accounts[0]._id,
        paymentFrequency: 'monthly',
        contractNumber: 'AL-987654321',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
        type: 'creditCard',
        initialAmount: 100000,
        currentAmount: 15800,
        interestRate: 23.9,
        startDate: new Date(2023, 5, 1),
        nextPaymentDate: new Date(Date.now() + 12 * 24 * 60 * 60 * 1000),
        nextPaymentAmount: 3000,
        lenderName: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        linkedAccountId: accounts[2]._id,
        paymentFrequency: 'monthly',
        creditLimit: 100000,
        minPaymentPercentage: 5,
        status: 'active',
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    debts.forEach(debt => {
      debt.paymentHistory = [];
      for (let i = 1; i <= 3; i++) {
        debt.paymentHistory.push({
          date: new Date(Date.now() - i * 30 * 24 * 60 * 60 * 1000),
          amount: debt.nextPaymentAmount,
          description: `–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ #${i}`,
          paymentType: 'regular',
        });
      }
    });

    const createdDebts = await Debt.insertMany(debts);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdDebts.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–ª–≥–æ–≤`);
  }

  async createTestSubscriptions() {
    console.log('üì∫ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

    const accounts = await Account.find({ userId: this.testUserId });
    const expenseCategories = await Category.find({
      userId: this.testUserId,
      type: 'expense',
    });

    const entertainmentCategory = expenseCategories.find(
      c => c.name === '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'
    );

    const subscriptions = [
      {
        userId: this.testUserId,
        name: 'Netflix',
        description: '–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å',
        amount: 799,
        currency: 'RUB',
        frequency: 'monthly',
        startDate: new Date(2023, 0, 15),
        nextPaymentDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
        accountId: accounts[0]._id,
        categoryId: entertainmentCategory?._id,
        autoPayment: true,
        provider: 'Netflix',
        website: 'https://netflix.com',
        status: 'active',
        notifications: {
          enabled: true,
          daysBefore: 3,
          email: true,
          push: true,
        },
      },
      {
        userId: this.testUserId,
        name: 'Spotify Premium',
        description: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥',
        amount: 299,
        currency: 'RUB',
        frequency: 'monthly',
        startDate: new Date(2023, 1, 10),
        nextPaymentDate: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000),
        accountId: accounts[0]._id,
        categoryId: entertainmentCategory?._id,
        autoPayment: true,
        provider: 'Spotify',
        website: 'https://spotify.com',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: '–Ø–Ω–¥–µ–∫—Å.–ü–ª—é—Å',
        description: '–ú—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å–∞',
        amount: 399,
        currency: 'RUB',
        frequency: 'monthly',
        startDate: new Date(2023, 2, 5),
        nextPaymentDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000),
        accountId: accounts[0]._id,
        categoryId: entertainmentCategory?._id,
        autoPayment: true,
        provider: '–Ø–Ω–¥–µ–∫—Å',
        website: 'https://plus.yandex.ru',
        status: 'active',
      },
      {
        userId: this.testUserId,
        name: 'Adobe Creative Cloud',
        description: '–î–∏–∑–∞–π–Ω –∏ —Ñ–æ—Ç–æ',
        amount: 2390,
        currency: 'RUB',
        frequency: 'monthly',
        startDate: new Date(2023, 3, 12),
        nextPaymentDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
        accountId: accounts[0]._id,
        autoPayment: false,
        provider: 'Adobe',
        website: 'https://adobe.com',
        status: 'paused',
        pauseReason: '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é',
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    subscriptions.forEach(subscription => {
      subscription.paymentHistory = [];
      for (let i = 1; i <= 6; i++) {
        subscription.paymentHistory.push({
          date: new Date(Date.now() - i * 30 * 24 * 60 * 60 * 1000),
          amount: subscription.amount,
          status: 'success',
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –∑–∞ ${subscription.name}`,
        });
      }
    });

    const createdSubscriptions = await Subscription.insertMany(subscriptions);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdSubscriptions.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
  }

  async createArchivedData() {
    console.log('üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    const archivedAccount = new Account({
      userId: this.testUserId,
      name: '–°—Ç–∞—Ä—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç',
      type: 'bank',
      currency: 'RUB',
      balance: 0,
      status: 'archived',
      createdAt: new Date('2023-01-15'),
      updatedAt: new Date('2023-06-20'),
    });
    await archivedAccount.save();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const archivedCategory = new Category({
      userId: this.testUserId,
      name: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
      type: 'expense',
      color: '#ff5722',
      icon: 'category',
      status: 'archived',
      createdAt: new Date('2023-02-10'),
      updatedAt: new Date('2023-07-15'),
    });
    await archivedCategory.save();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
    const archivedGoal = new Goal({
      userId: this.testUserId,
      name: '–ü–æ–µ–∑–¥–∫–∞ –≤ –æ—Ç–ø—É—Å–∫ 2023',
      targetAmount: 100000,
      currentAmount: 85000,
      deadline: new Date('2023-08-01'),
      status: 'archived',
      createdAt: new Date('2023-01-01'),
      updatedAt: new Date('2023-08-15'),
    });
    await archivedGoal.save();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞
    const archivedDebt = new Debt({
      userId: this.testUserId,
      name: '–°—Ç–∞—Ä—ã–π –∫—Ä–µ–¥–∏—Ç',
      type: 'loan',
      initialAmount: 50000,
      currentAmount: 0,
      interestRate: 15.0,
      startDate: new Date('2022-12-01'),
      endDate: new Date('2023-12-31'),
      lenderName: '–ë–∞–Ω–∫ ABC',
      status: 'archived',
      createdAt: new Date('2022-12-01'),
      updatedAt: new Date('2023-11-30'),
    });
    await archivedDebt.save();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const archivedSubscription = new Subscription({
      userId: this.testUserId,
      name: '–°—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å',
      description: '–†–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–π—Å—è —Å–µ—Ä–≤–∏—Å',
      amount: 299,
      currency: 'RUB',
      frequency: 'monthly',
      startDate: new Date('2022-05-01'),
      nextPaymentDate: new Date('2023-05-01'),
      provider: 'OldStreamService',
      status: 'archived',
      createdAt: new Date('2022-05-01'),
      updatedAt: new Date('2023-04-30'),
    });
    await archivedSubscription.save();

    console.log('‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
    console.log('- 1 —Å—á–µ—Ç');
    console.log('- 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    console.log('- 1 —Ü–µ–ª—å');
    console.log('- 1 –¥–æ–ª–≥');
    console.log('- 1 –ø–æ–¥–ø–∏—Å–∫–∞');
  }

  async clearDatabase() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    await Promise.all([
      User.deleteMany({}),
      Account.deleteMany({}),
      Category.deleteMany({}),
      Transaction.deleteMany({}),
      Goal.deleteMany({}),
      Debt.deleteMany({}),
      Subscription.deleteMany({}),
    ]);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
  }
}

module.exports = DatabaseSeeder;
