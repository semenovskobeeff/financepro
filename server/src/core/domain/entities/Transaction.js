const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: [true, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'],
      index: true,
    },
    type: {
      type: String,
      required: [true, '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'],
      enum: {
        values: ['income', 'expense', 'transfer'],
        message: '{VALUE} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ç–∏–ø–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      },
    },
    amount: {
      type: Number,
      required: [true, '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'],
      min: [0.01, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'],
      validate: {
        validator: function (value) {
          return Number.isFinite(value) && value > 0;
        },
        message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
      },
    },
    categoryId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Category',
      validate: {
        validator: function (value) {
          // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–æ –Ω–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
          if (this.type === 'transfer') {
            return value == null;
          }
          return value != null;
        },
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
      },
    },
    sourceId: {
      type: mongoose.Schema.Types.ObjectId,
      refPath: 'sourceModel',
    },
    sourceModel: {
      type: String,
      enum: ['Goal', 'Debt', 'Subscription'],
    },
    accountId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Account',
      required: [true, '–°—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'],
    },
    toAccountId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Account',
      validate: {
        validator: function (value) {
          // toAccountId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
          if (this.type === 'transfer') {
            return (
              value != null && value.toString() !== this.accountId.toString()
            );
          }
          return value == null;
        },
        message:
          '–°—á–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Å—á–µ—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞',
      },
    },
    date: {
      type: Date,
      required: [true, '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'],
      default: Date.now,
      validate: {
        validator: function (value) {
          // –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º (—Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
          return value <= new Date();
        },
        message: '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º',
      },
    },
    description: {
      type: String,
      trim: true,
      maxlength: [500, '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤'],
    },
    status: {
      type: String,
      required: true,
      default: 'active',
      enum: {
        values: ['active', 'archived', 'pending', 'failed'],
        message: '{VALUE} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Å—Ç–∞—Ç—É—Å–æ–º',
      },
    },

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
    processingStatus: {
      type: String,
      default: 'completed',
      enum: ['pending', 'processing', 'completed', 'failed'],
    },
    balanceSnapshot: {
      accountBalance: Number,
      toAccountBalance: Number,
    },

    // –ü–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    externalId: {
      type: String,
    },
    externalSystem: {
      type: String,
      enum: ['bank_api', 'manual', 'recurring', 'import'],
    },

    // –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    tags: [
      {
        type: String,
        trim: true,
        maxlength: [50, '–¢–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤'],
      },
    ],

    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    location: {
      type: {
        type: String,
        enum: ['Point'],
      },
      coordinates: {
        type: [Number],
        validate: {
          validator: function (value) {
            if (!value || value.length === 0) return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return (
              value.length === 2 &&
              value[0] >= -180 &&
              value[0] <= 180 && // longitude
              value[1] >= -90 &&
              value[1] <= 90
            ); // latitude
          },
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
        },
      },
    },

    // –ü–æ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    isRecurring: {
      type: Boolean,
      default: false,
    },
    recurringPattern: {
      frequency: {
        type: String,
        enum: ['daily', 'weekly', 'monthly', 'yearly'],
      },
      interval: {
        type: Number,
        min: 1,
        default: 1,
      },
      endDate: Date,
      nextOccurrence: Date,
    },
  },
  {
    timestamps: true,
    toJSON: {
      virtuals: true,
      transform: function (doc, ret) {
        delete ret.__v;
        return ret;
      },
    },
  }
);

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
transactionSchema.index({ userId: 1, date: -1 });
transactionSchema.index({ userId: 1, type: 1 });
transactionSchema.index({ userId: 1, status: 1 });
transactionSchema.index({ accountId: 1, date: -1 });
transactionSchema.index({ categoryId: 1, date: -1 });
transactionSchema.index({ date: -1 });
// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è externalId (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è sparse –∏–∑ –ø–æ–ª—è —Å—Ö–µ–º—ã)
transactionSchema.index({ externalId: 1 }, { sparse: true });

// –ì–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
transactionSchema.index({ location: '2dsphere' });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
transactionSchema.virtual('account', {
  ref: 'Account',
  localField: 'accountId',
  foreignField: '_id',
  justOne: true,
});

transactionSchema.virtual('toAccount', {
  ref: 'Account',
  localField: 'toAccountId',
  foreignField: '_id',
  justOne: true,
});

transactionSchema.virtual('category', {
  ref: 'Category',
  localField: 'categoryId',
  foreignField: '_id',
  justOne: true,
});

transactionSchema.virtual('user', {
  ref: 'User',
  localField: 'userId',
  foreignField: '_id',
  justOne: true,
});

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
transactionSchema.pre('save', async function (next) {
  try {
    console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:', {
      id: this._id,
      type: this.type,
      amount: this.amount,
      categoryId: this.categoryId,
      accountId: this.accountId,
      userId: this.userId,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (this.categoryId && this.type !== 'transfer') {
      const Category = mongoose.model('Category');
      const category = await Category.findById(this.categoryId);
      if (!category) {
        throw new Error('–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      if (category.type !== this.type) {
        throw new Error('–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    const Account = mongoose.model('Account');
    const account = await Account.findById(this.accountId);
    if (!account) {
      throw new Error('–°—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (this.toAccountId) {
      const toAccount = await Account.findById(this.toAccountId);
      if (!toAccount) {
        throw new Error('–°—á–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    next(error);
  }
});

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Å—á–µ—Ç–æ–≤ - –û–¢–ö–õ–Æ–ß–ï–ù
/*
transactionSchema.post('save', async function (doc) {
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥
    if (doc._skipBalanceUpdate) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Ñ–ª–∞–≥—É _skipBalanceUpdate');
      return;
    }

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', doc._id);

    const Account = mongoose.model('Account');
    const balanceService = require('../../../modules/operations/services/balanceService');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    const account = await Account.findById(doc.accountId);
    if (!account) {
      console.error('‚ùå –°—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', doc.accountId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (account.userId.toString() !== doc.userId.toString()) {
      console.error('‚ùå –°—á–µ—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', doc.accountId);
      return;
    }

    // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    await balanceService.syncAccountBalance(doc.accountId);

    // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏ —Ü–µ–ª–µ–≤–æ–π —Å—á–µ—Ç
    if (doc.type === 'transfer' && doc.toAccountId) {
      const toAccount = await Account.findById(doc.toAccountId);
      if (!toAccount) {
        console.error('‚ùå –°—á–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', doc.toAccountId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (toAccount.userId.toString() !== doc.userId.toString()) {
        console.error(
          '‚ùå –°—á–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:',
          doc.toAccountId
        );
        return;
      }

      // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
      await balanceService.syncAccountBalance(doc.toAccountId);
    }

    console.log(
      '‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏:',
      doc._id
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);

    // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    try {
      const balanceService = require('../../../modules/operations/services/balanceService');
      console.log('üö® –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤...');
      await balanceService.validateAndFixBalances(doc.userId, true);
    } catch (emergencyError) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:',
        emergencyError
      );
    }
  }
});
*/

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
transactionSchema.statics.findByUserId = function (userId, options = {}) {
  const {
    status = 'active',
    type,
    accountId,
    categoryId,
    startDate,
    endDate,
    limit = 50,
    skip = 0,
    sort = { date: -1 },
  } = options;

  const query = { userId, status };

  if (type) query.type = type;
  if (accountId) query.accountId = accountId;
  if (categoryId) query.categoryId = categoryId;

  if (startDate || endDate) {
    query.date = {};
    if (startDate) query.date.$gte = new Date(startDate);
    if (endDate) query.date.$lte = new Date(endDate);
  }

  return this.find(query)
    .sort(sort)
    .limit(limit)
    .skip(skip)
    .populate('categoryId', 'name icon type')
    .populate('accountId', 'name type')
    .populate('toAccountId', 'name type');
};

transactionSchema.statics.getStats = function (userId, options = {}) {
  const { startDate, endDate, groupBy = 'month' } = options;

  const matchStage = {
    userId: new mongoose.Types.ObjectId(userId),
    status: 'active',
  };

  if (startDate || endDate) {
    matchStage.date = {};
    if (startDate) matchStage.date.$gte = new Date(startDate);
    if (endDate) matchStage.date.$lte = new Date(endDate);
  }

  const groupFormat =
    groupBy === 'day' ? '%Y-%m-%d' : groupBy === 'week' ? '%Y-%U' : '%Y-%m';

  return this.aggregate([
    { $match: matchStage },
    {
      $group: {
        _id: {
          period: { $dateToString: { format: groupFormat, date: '$date' } },
          type: '$type',
        },
        total: { $sum: '$amount' },
        count: { $sum: 1 },
      },
    },
    {
      $group: {
        _id: '$_id.period',
        stats: {
          $push: {
            type: '$_id.type',
            total: '$total',
            count: '$count',
          },
        },
      },
    },
    { $sort: { _id: -1 } },
  ]);
};

module.exports = mongoose.model('Transaction', transactionSchema);
