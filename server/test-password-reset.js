const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api/users';

async function testPasswordReset() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è\n');

  // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è...');
  try {
    const response = await axios.post(`${BASE_URL}/forgot-password`, {
      email: 'test@example.com',
    });
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ:', response.data.message);
  } catch (error) {
    if (error.response) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.response.data);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }
  }

  console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email...');
  try {
    await axios.post(`${BASE_URL}/forgot-password`, {
      email: 'invalid-email',
    });
  } catch (error) {
    if (error.response && error.response.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response.data.message);
    } else {
      console.log(
        '‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:',
        error.response?.data || error.message
      );
    }
  }

  console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞...');
  try {
    await axios.post(`${BASE_URL}/reset-password`, {
      token: 'invalid-token',
      password: 'NewPassword123!',
    });
  } catch (error) {
    if (error.response && error.response.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response.data.message);
    } else {
      console.log(
        '‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:',
        error.response?.data || error.message
      );
    }
  }

  console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è...');
  try {
    await axios.post(`${BASE_URL}/reset-password`, {
      token: '1234567890abcdef1234567890abcdef12345678',
      password: 'weak',
    });
  } catch (error) {
    if (error.response && error.response.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response.data.message);
    } else {
      console.log(
        '‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:',
        error.response?.data || error.message
      );
    }
  }

  console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...');
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥...');

  for (let i = 1; i <= 4; i++) {
    try {
      const response = await axios.post(`${BASE_URL}/forgot-password`, {
        email: 'rate-limit-test@example.com',
      });
      console.log(`   –ó–∞–ø—Ä–æ—Å ${i}: ‚úÖ ${response.data.message}`);
    } catch (error) {
      if (error.response && error.response.status === 429) {
        console.log(
          `   –ó–∞–ø—Ä–æ—Å ${i}: ‚úÖ Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.response.data.message}`
        );
      } else {
        console.log(
          `   –ó–∞–ø—Ä–æ—Å ${i}: ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`,
          error.response?.data || error.message
        );
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫');
  console.log('2. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  console.log(
    '3. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º email'
  );
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPasswordReset().catch(console.error);
